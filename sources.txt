@startuml
!theme plain
' STYLE START
hide empty members
skinparam classBackgroundColor PaleGreen
skinparam classArrowColor SeaGreen
skinparam classBorderColor SpringGreen
skinparam stereotypeCBackgroundColor YellowGreen
skinparam stereotypeCBackgroundColor<< Foo >> DimGray
' STYLE END

title
<u>Formatted</u> title example
on <i>several</i> lines and using <font color=red>html</font>

end title


class "SavedItemsControllerDelegate" as SavedItemsControllerDelegate << (P, GoldenRod) protocol >> { 
  +controller(_:didChange:at:for:newIndexPath:)
  +controllerDidChangeContent(_:) 
}
class "SavedItemsController" as SavedItemsController << (P, GoldenRod) protocol >> { 
  +delegate : SavedItemsControllerDelegate?
  +predicate : NSPredicate?
  +sortDescriptors : [NSSortDescriptor]?
  +fetchedObjects : [SavedItem]?
  +performFetch()
  +indexPath(forObject:) 
}
class "Source" as Source << (P, GoldenRod) protocol >> { 
  +viewContext : NSManagedObjectContext
  +events : AnyPublisher<SyncEvent, Never>
  +initialSavesDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +initialArchiveDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +clear()
  +deleteAccount()
  +makeSavesController()
  +makeArchiveController()
  +makeSearchService()
  +makeUndownloadedImagesController()
  +refreshSaves(completion:)
  +backgroundObject(id:)
  +viewObject(id:)
  +backgroundRefresh(_:mergeChanges:)
  +viewRefresh(_:mergeChanges:)
  +refreshArchive(completion:)
  +retryImmediately()
  +favorite(item:)
  +unfavorite(item:)
  +delete(item:)
  +archive(item:)
  +unarchive(item:)
  +addTags(item:tags:)
  +deleteTag(tag:)
  +renameTag(from:to:)
  +retrieveTags(excluding:)
  +fetchAllTags()
  +filterTags(with:excluding:)
  +fetchTags(isArchived:)
  +fetchSlateLineup(_:)
  +fetchSlate(_:)
  +restore()
  +resolveUnresolvedSavedItems()
  +save(recommendation:)
  +archive(recommendation:)
  +remove(recommendation:)
  +download(images:)
  +fetchDetails(for:)
  +fetchDetails(for:)
  +save(url:)
  +fetchItem(_:)
  +searchSaves(search:)
  +fetchOrCreateSavedItem(with:and:)
  +recentSaves(limit:)
  +slateLineup(identifier:)
  +unreadSaves()
  +refreshSaves() <&bolt>
  +refreshArchive() <&bolt>
  +refresh() <&bolt>
  +refreshSaves() <&bolt>
  +refreshArchive() <&bolt>
  +refresh() <&bolt> 
}
class "ImagesControllerDelegate" as ImagesControllerDelegate << (P, GoldenRod) protocol >> { 
  +controller(_:didChange:at:for:newIndexPath:)
  +controllerDidChangeContent(_:) 
}
class "ImagesController" as ImagesController << (P, GoldenRod) protocol >> { 
  +delegate : ImagesControllerDelegate?
  +images : [Image]?
  +performFetch() 
}
class "NetworkPath" as NetworkPath << (P, GoldenRod) protocol >> { 
  +status : NWPath.Status 
}
class "NetworkPathMonitor" as NetworkPathMonitor << (P, GoldenRod) protocol >> { 
  +currentNetworkPath : NetworkPath
  +updateHandler : UpdateHandler?
  +start(queue:) 
}
class "Session" as Session << (P, GoldenRod) protocol >> { 
  +guid : String
  +accessToken : String 
}
class "SessionProvider" as SessionProvider << (P, GoldenRod) protocol >> { 
  +session : Session? 
}
class "AccessTokenProvider" as AccessTokenProvider << (P, GoldenRod) protocol >> { 
  +accessToken : String? 
}
class "SearchService" as SearchService << (P, GoldenRod) protocol >> { 
  +results : Published<[SearchSavedItem]?>.Publisher
  +search(for:scope:)
  +hasFinishedResults : Bool
  +lastEndCursor : String 
}
class "ExpiringActivityPerformer" as ExpiringActivityPerformer << (P, GoldenRod) protocol >> { 
  +performExpiringActivity(withReason:using:) 
}
class "URLSessionProtocol" as URLSessionProtocol << (P, GoldenRod) protocol >> { 
  +data(for:delegate:) 
}
class "BackgroundTaskManager" as BackgroundTaskManager << (P, GoldenRod) protocol >> { 
  +beginTask(withName:expirationHandler:)
  +endTask(_:)
  +beginTask() <&bolt>
  +beginTask() <&bolt> 
}
class "V3ClientProtocol" as V3ClientProtocol << (P, GoldenRod) protocol >> { 
  +registerPushToken(for:pushType:token:session:)
  +deregisterPushToken(for:pushType:session:)
  +premiumStatus() 
}
class "SaveService" as SaveService << (P, GoldenRod) protocol >> { 
  +save(url:)
  +retrieveTags(excluding:)
  +filterTags(with:excluding:)
  +addTags(savedItem:tags:) 
}
class "SavedItemsControllerDelegate" as SavedItemsControllerDelegate0 << (P, GoldenRod) protocol >> { 
  +controller(_:didChange:at:for:newIndexPath:)
  +controllerDidChangeContent(_:) 
}
class "SavedItemsController" as SavedItemsController1 << (P, GoldenRod) protocol >> { 
  +delegate : SavedItemsControllerDelegate?
  +predicate : NSPredicate?
  +sortDescriptors : [NSSortDescriptor]?
  +fetchedObjects : [SavedItem]?
  +performFetch()
  +indexPath(forObject:) 
}
class "Source" as Source2 << (P, GoldenRod) protocol >> { 
  +viewContext : NSManagedObjectContext
  +events : AnyPublisher<SyncEvent, Never>
  +initialSavesDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +initialArchiveDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +clear()
  +deleteAccount()
  +makeSavesController()
  +makeArchiveController()
  +makeSearchService()
  +makeUndownloadedImagesController()
  +refreshSaves(completion:)
  +backgroundObject(id:)
  +viewObject(id:)
  +backgroundRefresh(_:mergeChanges:)
  +viewRefresh(_:mergeChanges:)
  +refreshArchive(completion:)
  +retryImmediately()
  +favorite(item:)
  +unfavorite(item:)
  +delete(item:)
  +archive(item:)
  +unarchive(item:)
  +addTags(item:tags:)
  +deleteTag(tag:)
  +renameTag(from:to:)
  +retrieveTags(excluding:)
  +fetchAllTags()
  +filterTags(with:excluding:)
  +fetchTags(isArchived:)
  +fetchSlateLineup(_:)
  +fetchSlate(_:)
  +restore()
  +resolveUnresolvedSavedItems()
  +save(recommendation:)
  +archive(recommendation:)
  +remove(recommendation:)
  +download(images:)
  +fetchDetails(for:)
  +fetchDetails(for:)
  +save(url:)
  +fetchItem(_:)
  +searchSaves(search:)
  +fetchOrCreateSavedItem(with:and:)
  +recentSaves(limit:)
  +slateLineup(identifier:)
  +unreadSaves() 
}
class "ImagesControllerDelegate" as ImagesControllerDelegate3 << (P, GoldenRod) protocol >> { 
  +controller(_:didChange:at:for:newIndexPath:)
  +controllerDidChangeContent(_:) 
}
class "ImagesController" as ImagesController4 << (P, GoldenRod) protocol >> { 
  +delegate : ImagesControllerDelegate?
  +images : [Image]?
  +performFetch() 
}
class "NetworkPath" as NetworkPath5 << (P, GoldenRod) protocol >> { 
  +status : NWPath.Status 
}
class "NetworkPathMonitor" as NetworkPathMonitor6 << (P, GoldenRod) protocol >> { 
  +currentNetworkPath : NetworkPath
  +updateHandler : UpdateHandler?
  +start(queue:) 
}
class "Session" as Session7 << (P, GoldenRod) protocol >> { 
  +guid : String
  +accessToken : String 
}
class "SessionProvider" as SessionProvider8 << (P, GoldenRod) protocol >> { 
  +session : Session? 
}
class "AccessTokenProvider" as AccessTokenProvider9 << (P, GoldenRod) protocol >> { 
  +accessToken : String? 
}
class "SearchService" as SearchService10 << (P, GoldenRod) protocol >> { 
  +results : Published<[SearchSavedItem]?>.Publisher
  +search(for:scope:)
  +hasFinishedResults : Bool
  +lastEndCursor : String 
}
class "ExpiringActivityPerformer" as ExpiringActivityPerformer11 << (P, GoldenRod) protocol >> { 
  +performExpiringActivity(withReason:using:) 
}
class "URLSessionProtocol" as URLSessionProtocol12 << (P, GoldenRod) protocol >> { 
  +data(for:delegate:) 
}
class "BackgroundTaskManager" as BackgroundTaskManager13 << (P, GoldenRod) protocol >> { 
  +beginTask(withName:expirationHandler:)
  +endTask(_:) 
}
class "V3ClientProtocol" as V3ClientProtocol14 << (P, GoldenRod) protocol >> { 
  +registerPushToken(for:pushType:token:session:)
  +deregisterPushToken(for:pushType:session:)
  +premiumStatus() 
}
class "SaveService" as SaveService15 << (P, GoldenRod) protocol >> { 
  +save(url:)
  +retrieveTags(excluding:)
  +filterTags(with:excluding:)
  +addTags(savedItem:tags:) 
}
class "OEmbedService" as OEmbedService << (C, DarkSeaGreen) >> { 
  +init(session:)
  +fetch(request:) 
}
class "OEmbed" as OEmbed << (S, SkyBlue) struct >> { 
  +html : String?
  +width : Int?
  +height : Int? 
}
class "OEmbedRequest" as OEmbedRequest << (S, SkyBlue) struct >> { 
  +id : String?
  +width : Int?
  +init(id:width:) 
}
class "OSNotificationCenter" as OSNotificationCenter << (C, DarkSeaGreen) >> { 
  +init(notifications:)
  +deinit
  +add(observer:name:handler:)
  +remove(observer:name:)
  +post(name:)
  +removeAllObservers() 
}
class "InitialDownloadState" as InitialDownloadState << (E, LightSteelBlue) enum >> { 
  +unknown
  +started
  +paginating(totalCount:)
  +completed 
}
class "ItemImageness" as ItemImageness << (E, LightSteelBlue) enum >> { 
  +noImages
  +hasImages
  +isImage 
}
class "Space" as Space << (C, DarkSeaGreen) >> { 
  +init(backgroundContext:viewContext:) 
}
class "PersistentContainer" as PersistentContainer << (C, DarkSeaGreen) >> { 
  +rootSpace
  +init(storage:userDefaults:) 
}
class "SavedItem" as SavedItem << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:url:remoteID:)
  +update(from:with:) <&bolt>
  +update(from:) <&bolt>
  +update(from:with:) <&bolt>
  +archivedAt : Date? <&bolt>
  +createdAt : Date? <&bolt>
  +cursor : String? <&bolt>
  +deletedAt : Date? <&bolt>
  +isArchived : Bool <&bolt>
  +isFavorite : Bool <&bolt>
  +remoteID : String? <&bolt>
  +url : URL <&bolt>
  +item : Item? <&bolt>
  +savedItemUpdatedNotification : SavedItemUpdatedNotification? <&bolt>
  +tags : NSOrderedSet? <&bolt>
  +unresolvedSavedItem : UnresolvedSavedItem? <&bolt>
  +insertIntoTags(_:at:) <&bolt>
  +removeFromTags(at:) <&bolt>
  +insertIntoTags(_:at:) <&bolt>
  +removeFromTags(at:) <&bolt>
  +replaceTags(at:with:) <&bolt>
  +replaceTags(at:with:) <&bolt>
  +addToTags(_:) <&bolt>
  +removeFromTags(_:) <&bolt>
  +addToTags(_:) <&bolt>
  +removeFromTags(_:) <&bolt>
  +update(from:with:) <&bolt>
  +update(from:) <&bolt>
  +update(from:with:) <&bolt>
  +archivedAt : Date? <&bolt>
  +createdAt : Date? <&bolt>
  +cursor : String? <&bolt>
  +deletedAt : Date? <&bolt>
  +isArchived : Bool <&bolt>
  +isFavorite : Bool <&bolt>
  +remoteID : String? <&bolt>
  +url : URL <&bolt>
  +item : Item? <&bolt>
  +savedItemUpdatedNotification : SavedItemUpdatedNotification? <&bolt>
  +tags : NSOrderedSet? <&bolt>
  +unresolvedSavedItem : UnresolvedSavedItem? <&bolt>
  +insertIntoTags(_:at:) <&bolt>
  +removeFromTags(at:) <&bolt>
  +insertIntoTags(_:at:) <&bolt>
  +removeFromTags(at:) <&bolt>
  +replaceTags(at:with:) <&bolt>
  +replaceTags(at:with:) <&bolt>
  +addToTags(_:) <&bolt>
  +removeFromTags(_:) <&bolt>
  +addToTags(_:) <&bolt>
  +removeFromTags(_:) <&bolt> 
}
class "SlateLineup" as SlateLineup << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:remoteID:expermimentID:requestID:)
  +experimentID : String <&bolt>
  +remoteID : String <&bolt>
  +requestID : String <&bolt>
  +slates : NSOrderedSet? <&bolt>
  +insertIntoSlates(_:at:) <&bolt>
  +removeFromSlates(at:) <&bolt>
  +insertIntoSlates(_:at:) <&bolt>
  +removeFromSlates(at:) <&bolt>
  +replaceSlates(at:with:) <&bolt>
  +replaceSlates(at:with:) <&bolt>
  +addToSlates(_:) <&bolt>
  +removeFromSlates(_:) <&bolt>
  +addToSlates(_:) <&bolt>
  +removeFromSlates(_:) <&bolt>
  +experimentID : String <&bolt>
  +remoteID : String <&bolt>
  +requestID : String <&bolt>
  +slates : NSOrderedSet? <&bolt>
  +insertIntoSlates(_:at:) <&bolt>
  +removeFromSlates(at:) <&bolt>
  +insertIntoSlates(_:at:) <&bolt>
  +removeFromSlates(at:) <&bolt>
  +replaceSlates(at:with:) <&bolt>
  +replaceSlates(at:with:) <&bolt>
  +addToSlates(_:) <&bolt>
  +removeFromSlates(_:) <&bolt>
  +addToSlates(_:) <&bolt>
  +removeFromSlates(_:) <&bolt> 
}
class "Item" as Item << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:givenURL:remoteID:)
  +bestURL : URL? <&bolt>
  +hasImage : ItemImageness? <&bolt>
  +hasVideo : ItemVideoness? <&bolt>
  +article : Article? <&bolt>
  +datePublished : Date? <&bolt>
  +domain : String? <&bolt>
  +excerpt : String? <&bolt>
  +givenURL : URL <&bolt>
  +imageness : String? <&bolt>
  +isArticle : Bool <&bolt>
  +language : String? <&bolt>
  +remoteID : String <&bolt>
  +resolvedURL : URL? <&bolt>
  +timeToRead : NSNumber? <&bolt>
  +title : String? <&bolt>
  +topImageURL : URL? <&bolt>
  +videoness : String? <&bolt>
  +authors : NSOrderedSet? <&bolt>
  +domainMetadata : DomainMetadata? <&bolt>
  +images : NSOrderedSet? <&bolt>
  +recommendation : Recommendation? <&bolt>
  +savedItem : SavedItem? <&bolt>
  +syndicatedArticle : SyndicatedArticle? <&bolt>
  +insertIntoAuthors(_:at:) <&bolt>
  +removeFromAuthors(at:) <&bolt>
  +insertIntoAuthors(_:at:) <&bolt>
  +removeFromAuthors(at:) <&bolt>
  +replaceAuthors(at:with:) <&bolt>
  +replaceAuthors(at:with:) <&bolt>
  +addToAuthors(_:) <&bolt>
  +removeFromAuthors(_:) <&bolt>
  +addToAuthors(_:) <&bolt>
  +removeFromAuthors(_:) <&bolt>
  +insertIntoImages(_:at:) <&bolt>
  +removeFromImages(at:) <&bolt>
  +insertIntoImages(_:at:) <&bolt>
  +removeFromImages(at:) <&bolt>
  +replaceImages(at:with:) <&bolt>
  +replaceImages(at:with:) <&bolt>
  +addToImages(_:) <&bolt>
  +removeFromImages(_:) <&bolt>
  +addToImages(_:) <&bolt>
  +removeFromImages(_:) <&bolt>
  +bestURL : URL? <&bolt>
  +hasImage : ItemImageness? <&bolt>
  +hasVideo : ItemVideoness? <&bolt>
  +article : Article? <&bolt>
  +datePublished : Date? <&bolt>
  +domain : String? <&bolt>
  +excerpt : String? <&bolt>
  +givenURL : URL <&bolt>
  +imageness : String? <&bolt>
  +isArticle : Bool <&bolt>
  +language : String? <&bolt>
  +remoteID : String <&bolt>
  +resolvedURL : URL? <&bolt>
  +timeToRead : NSNumber? <&bolt>
  +title : String? <&bolt>
  +topImageURL : URL? <&bolt>
  +videoness : String? <&bolt>
  +authors : NSOrderedSet? <&bolt>
  +domainMetadata : DomainMetadata? <&bolt>
  +images : NSOrderedSet? <&bolt>
  +recommendation : Recommendation? <&bolt>
  +savedItem : SavedItem? <&bolt>
  +syndicatedArticle : SyndicatedArticle? <&bolt>
  +insertIntoAuthors(_:at:) <&bolt>
  +removeFromAuthors(at:) <&bolt>
  +insertIntoAuthors(_:at:) <&bolt>
  +removeFromAuthors(at:) <&bolt>
  +replaceAuthors(at:with:) <&bolt>
  +replaceAuthors(at:with:) <&bolt>
  +addToAuthors(_:) <&bolt>
  +removeFromAuthors(_:) <&bolt>
  +addToAuthors(_:) <&bolt>
  +removeFromAuthors(_:) <&bolt>
  +insertIntoImages(_:at:) <&bolt>
  +removeFromImages(at:) <&bolt>
  +insertIntoImages(_:at:) <&bolt>
  +removeFromImages(at:) <&bolt>
  +replaceImages(at:with:) <&bolt>
  +replaceImages(at:with:) <&bolt>
  +addToImages(_:) <&bolt>
  +removeFromImages(_:) <&bolt>
  +addToImages(_:) <&bolt>
  +removeFromImages(_:) <&bolt> 
}
class "Slate" as Slate << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:remoteID:expermimentID:requestID:)
  +experimentID : String <&bolt>
  +name : String? <&bolt>
  +remoteID : String <&bolt>
  +requestID : String <&bolt>
  +slateDescription : String? <&bolt>
  +recommendations : NSOrderedSet? <&bolt>
  +slateLineup : SlateLineup? <&bolt>
  +insertIntoRecommendations(_:at:) <&bolt>
  +removeFromRecommendations(at:) <&bolt>
  +insertIntoRecommendations(_:at:) <&bolt>
  +removeFromRecommendations(at:) <&bolt>
  +replaceRecommendations(at:with:) <&bolt>
  +replaceRecommendations(at:with:) <&bolt>
  +addToRecommendations(_:) <&bolt>
  +removeFromRecommendations(_:) <&bolt>
  +addToRecommendations(_:) <&bolt>
  +removeFromRecommendations(_:) <&bolt>
  +experimentID : String <&bolt>
  +name : String? <&bolt>
  +remoteID : String <&bolt>
  +requestID : String <&bolt>
  +slateDescription : String? <&bolt>
  +recommendations : NSOrderedSet? <&bolt>
  +slateLineup : SlateLineup? <&bolt>
  +insertIntoRecommendations(_:at:) <&bolt>
  +removeFromRecommendations(at:) <&bolt>
  +insertIntoRecommendations(_:at:) <&bolt>
  +removeFromRecommendations(at:) <&bolt>
  +replaceRecommendations(at:with:) <&bolt>
  +replaceRecommendations(at:with:) <&bolt>
  +addToRecommendations(_:) <&bolt>
  +removeFromRecommendations(_:) <&bolt>
  +addToRecommendations(_:) <&bolt>
  +removeFromRecommendations(_:) <&bolt> 
}
class "Recommendation" as Recommendation << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:remoteID:)
  +excerpt : String? <&bolt>
  +imageURL : URL? <&bolt>
  +remoteID : String <&bolt>
  +title : String? <&bolt>
  +item : Item? <&bolt>
  +slate : Slate? <&bolt>
  +excerpt : String? <&bolt>
  +imageURL : URL? <&bolt>
  +remoteID : String <&bolt>
  +title : String? <&bolt>
  +item : Item? <&bolt>
  +slate : Slate? <&bolt> 
}
class "Requests" as Requests << (E, LightSteelBlue) enum >> { 
  +{static} fetchSavedItems(limit:)
  +{static} fetchArchivedItems(filters:)
  +{static} fetchAllSavedItems()
  +{static} fetchSavedItem(byRemoteID:)
  +{static} fetchSavedItem(byRemoteItemID:)
  +{static} fetchSavedItem(byURL:)
  +{static} fetchSavedItems(bySearchTerm:userPremium:)
  +{static} fetchPersistentSyncTasks()
  +{static} fetchSavedItemUpdatedNotifications()
  +{static} fetchUnresolvedSavedItems()
  +{static} fetchSlateLineups()
  +{static} fetchSlateLineup(byID:)
  +{static} fetchSlates()
  +{static} fetchSlate(byID:)
  +{static} fetchRecommendations()
  +{static} fetchItems()
  +{static} fetchItem(byRemoteID:)
  +{static} fetchSyndicatedArticles()
  +{static} fetchSyndicatedArticle(byItemId:)
  +{static} fetchTags()
  +{static} fetchSavedTags()
  +{static} fetchArchivedTags()
  +{static} fetchTag(byName:)
  +{static} fetchTag(byID:)
  +{static} fetchTagsWithNoSavedItems()
  +{static} fetchTags(excluding:)
  +{static} filterTags(with:excluding:)
  +{static} fetchUnsavedItems()
  +{static} fetchUndownloadedImages()
  +{static} fetchSavedItem(for:)
  +{static} fetchItem(byURL:) 
}
class "Predicates" as Predicates << (E, LightSteelBlue) enum >> { 
  +{static} savedItems(filters:)
  +{static} archivedItems(filters:)
  +{static} allItems(filters:) 
}
class "VIDExtractor" as VIDExtractor << (S, SkyBlue) struct >> { 
  +vid : String?
  +init(_:) 
}
class "PocketSaveService" as PocketSaveService << (C, DarkSeaGreen) >> { 
  +init(space:sessionProvider:consumerKey:expiringActivityPerformer:)
  +save(url:)
  +retrieveTags(excluding:)
  +filterTags(with:excluding:)
  +addTags(savedItem:tags:) 
}
class "SyncTaskContainer" as SyncTaskContainer << (C, DarkSeaGreen) >> { 
  +{static} supportsSecureCoding : Bool 
}
class "AsyncOperation" as AsyncOperation << (C, DarkSeaGreen) >> { 
  +isAsynchronous : Bool
  +isFinished : Bool
  +isExecuting : Bool
  +finishOperation() 
}
class "SearchServiceError" as SearchServiceError << (E, LightSteelBlue) enum >> { 
  +noInternet 
}
class "SearchSavedItem" as SearchSavedItem << (S, SkyBlue) struct >> { 
  +remoteItem : SavedItem.RemoteSavedItem
  +item : SavedItem.RemoteSavedItem.Item
  +cursor : String? 
}
class "PocketSearchService" as PocketSearchService << (C, DarkSeaGreen) >> { 
  +results : Published<[SearchSavedItem]?>.Publisher
  +hasFinishedResults : Bool
  +lastEndCursor : String
  +search(for:scope:) 
}
class "V3DeviceToken" as V3DeviceToken << (S, SkyBlue) struct >> {  
}
class "RegisterPushTokenResponse" as RegisterPushTokenResponse << (S, SkyBlue) struct >> {  
}
class "DeregisterPushTokenResponse" as DeregisterPushTokenResponse << (S, SkyBlue) struct >> {  
}
class "PremiumStatusResponse" as PremiumStatusResponse << (S, SkyBlue) struct >> { 
  +subscriptionInfo : SubscriptionInfo 
}
class "Feature" as Feature << (S, SkyBlue) struct >> {  
}
class "SubscriptionInfo" as SubscriptionInfo << (S, SkyBlue) struct >> { 
  +source : String
  +sourceDisplay : String
  +subscriptionSource : String
  +subscriptionID : String
  +orderID : String
  +purchaseDate : String
  +renewDate : String
  +activeUntilDate : String
  +subscriptionTypeID : String
  +subscriptionType : String
  +isActive : Int
  +status : String
  +displayAmount : String
  +usdAmount : String 
}
class "RegisterPushTokenRequest" as RegisterPushTokenRequest << (S, SkyBlue) struct >> {  
}
class "DeregisterPushTokenRequest" as DeregisterPushTokenRequest << (S, SkyBlue) struct >> {  
}
class "PremiumStatusRequest" as PremiumStatusRequest << (S, SkyBlue) struct >> {  
}
class "PushType" as PushType << (E, LightSteelBlue) enum >> { 
  +alphadev
  +alpha
  +proddev
  +prod 
}
class "V3Client" as V3Client << (C, DarkSeaGreen) >> { 
  +{static} createDefault(sessionProvider:consumerKey:)
  +init(sessionProvider:consumerKey:urlSession:)
  +registerPushToken(for:pushType:token:session:) <&bolt>
  +deregisterPushToken(for:pushType:session:) <&bolt>
  +premiumStatus() <&bolt>
  +registerPushToken(for:pushType:token:session:) <&bolt>
  +deregisterPushToken(for:pushType:session:) <&bolt>
  +premiumStatus() <&bolt> 
}
class "ItemVideoness" as ItemVideoness << (E, LightSteelBlue) enum >> { 
  +noVideos
  +hasVideos
  +isVideo 
}
class "SyncEvent" as SyncEvent << (E, LightSteelBlue) enum >> { 
  +error(_:)
  +loadedArchivePage
  +savedItemCreated
  +savedItemsUpdated(_:) 
}
class "PocketSource" as PocketSource << (C, DarkSeaGreen) >> { 
  +events : AnyPublisher<SyncEvent, Never>
  +initialSavesDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +initialArchiveDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +init(space:user:sessionProvider:consumerKey:defaults:backgroundTaskManager:)
  +deinit
  +viewContext : NSManagedObjectContext
  +clear()
  +makeSavesController()
  +makeArchiveController()
  +makeSearchService()
  +makeUndownloadedImagesController()
  +backgroundObject(id:)
  +viewObject(id:)
  +viewRefresh(_:mergeChanges:)
  +backgroundRefresh(_:mergeChanges:)
  +retryImmediately()
  +deleteAccount()
  +refreshSaves(completion:) <&bolt>
  +refreshArchive(completion:) <&bolt>
  +favorite(item:) <&bolt>
  +unfavorite(item:) <&bolt>
  +delete(item:) <&bolt>
  +archive(item:) <&bolt>
  +unarchive(item:) <&bolt>
  +save(item:) <&bolt>
  +addTags(item:tags:) <&bolt>
  +deleteTag(tag:) <&bolt>
  +renameTag(from:to:) <&bolt>
  +retrieveTags(excluding:) <&bolt>
  +fetchAllTags() <&bolt>
  +fetchTags(isArchived:) <&bolt>
  +filterTags(with:excluding:) <&bolt>
  +fetchDetails(for:) <&bolt>
  +fetchItem(_:) <&bolt>
  +fetchSlateLineup(_:) <&bolt>
  +fetchSlate(_:) <&bolt>
  +fetchDetails(for:) <&bolt>
  +restore() <&bolt>
  +resolveUnresolvedSavedItems() <&bolt>
  +save(recommendation:) <&bolt>
  +archive(recommendation:) <&bolt>
  +remove(recommendation:) <&bolt>
  +download(images:) <&bolt>
  +save(url:) <&bolt>
  +searchSaves(search:) <&bolt>
  +fetchOrCreateSavedItem(with:and:) <&bolt>
  +recentSaves(limit:) <&bolt>
  +slateLineup(identifier:) <&bolt>
  +unreadSaves() <&bolt>
  +refreshSaves(completion:) <&bolt>
  +refreshArchive(completion:) <&bolt>
  +favorite(item:) <&bolt>
  +unfavorite(item:) <&bolt>
  +delete(item:) <&bolt>
  +archive(item:) <&bolt>
  +unarchive(item:) <&bolt>
  +save(item:) <&bolt>
  +addTags(item:tags:) <&bolt>
  +deleteTag(tag:) <&bolt>
  +renameTag(from:to:) <&bolt>
  +retrieveTags(excluding:) <&bolt>
  +fetchAllTags() <&bolt>
  +fetchTags(isArchived:) <&bolt>
  +filterTags(with:excluding:) <&bolt>
  +fetchDetails(for:) <&bolt>
  +fetchItem(_:) <&bolt>
  +fetchSlateLineup(_:) <&bolt>
  +fetchSlate(_:) <&bolt>
  +fetchDetails(for:) <&bolt>
  +restore() <&bolt>
  +resolveUnresolvedSavedItems() <&bolt>
  +save(recommendation:) <&bolt>
  +archive(recommendation:) <&bolt>
  +remove(recommendation:) <&bolt>
  +download(images:) <&bolt>
  +save(url:) <&bolt>
  +searchSaves(search:) <&bolt>
  +fetchOrCreateSavedItem(with:and:) <&bolt>
  +recentSaves(limit:) <&bolt>
  +slateLineup(identifier:) <&bolt>
  +unreadSaves() <&bolt> 
}
class "SaveServiceStatus" as SaveServiceStatus << (E, LightSteelBlue) enum >> { 
  +existingItem(_:)
  +newItem(_:)
  +taggedItem(_:) 
}
class "OEmbedService" as OEmbedService16 << (C, DarkSeaGreen) >> { 
  +init(session:)
  +fetch(request:) 
}
class "OEmbed" as OEmbed17 << (S, SkyBlue) struct >> { 
  +html : String?
  +width : Int?
  +height : Int? 
}
class "OEmbedRequest" as OEmbedRequest18 << (S, SkyBlue) struct >> { 
  +id : String?
  +width : Int?
  +init(id:width:) 
}
class "OSNotificationCenter" as OSNotificationCenter19 << (C, DarkSeaGreen) >> { 
  +init(notifications:)
  +deinit
  +add(observer:name:handler:)
  +remove(observer:name:)
  +post(name:)
  +removeAllObservers() 
}
class "InitialDownloadState" as InitialDownloadState20 << (E, LightSteelBlue) enum >> { 
  +unknown
  +started
  +paginating(totalCount:)
  +completed 
}
class "ItemImageness" as ItemImageness21 << (E, LightSteelBlue) enum >> { 
  +noImages
  +hasImages
  +isImage 
}
class "Space" as Space22 << (C, DarkSeaGreen) >> { 
  +init(backgroundContext:viewContext:) 
}
class "PersistentContainer" as PersistentContainer23 << (C, DarkSeaGreen) >> { 
  +rootSpace
  +init(storage:userDefaults:) 
}
class "SavedItem" as SavedItem24 << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:url:remoteID:) 
}
class "SlateLineup" as SlateLineup25 << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:remoteID:expermimentID:requestID:) 
}
class "Item" as Item26 << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:givenURL:remoteID:) 
}
class "Slate" as Slate27 << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:remoteID:expermimentID:requestID:) 
}
class "Recommendation" as Recommendation28 << (C, DarkSeaGreen) >> { 
  +init()
  +init(context:)
  +init(context:remoteID:) 
}
class "Requests" as Requests29 << (E, LightSteelBlue) enum >> { 
  +{static} fetchSavedItems(limit:)
  +{static} fetchArchivedItems(filters:)
  +{static} fetchAllSavedItems()
  +{static} fetchSavedItem(byRemoteID:)
  +{static} fetchSavedItem(byRemoteItemID:)
  +{static} fetchSavedItem(byURL:)
  +{static} fetchSavedItems(bySearchTerm:userPremium:)
  +{static} fetchPersistentSyncTasks()
  +{static} fetchSavedItemUpdatedNotifications()
  +{static} fetchUnresolvedSavedItems()
  +{static} fetchSlateLineups()
  +{static} fetchSlateLineup(byID:)
  +{static} fetchSlates()
  +{static} fetchSlate(byID:)
  +{static} fetchRecommendations()
  +{static} fetchItems()
  +{static} fetchItem(byRemoteID:)
  +{static} fetchSyndicatedArticles()
  +{static} fetchSyndicatedArticle(byItemId:)
  +{static} fetchTags()
  +{static} fetchSavedTags()
  +{static} fetchArchivedTags()
  +{static} fetchTag(byName:)
  +{static} fetchTag(byID:)
  +{static} fetchTagsWithNoSavedItems()
  +{static} fetchTags(excluding:)
  +{static} filterTags(with:excluding:)
  +{static} fetchUnsavedItems()
  +{static} fetchUndownloadedImages()
  +{static} fetchSavedItem(for:)
  +{static} fetchItem(byURL:) 
}
class "Predicates" as Predicates30 << (E, LightSteelBlue) enum >> { 
  +{static} savedItems(filters:)
  +{static} archivedItems(filters:)
  +{static} allItems(filters:) 
}
class "VIDExtractor" as VIDExtractor31 << (S, SkyBlue) struct >> { 
  +vid : String?
  +init(_:) 
}
class "PocketSaveService" as PocketSaveService32 << (C, DarkSeaGreen) >> { 
  +init(space:sessionProvider:consumerKey:expiringActivityPerformer:)
  +save(url:)
  +retrieveTags(excluding:)
  +filterTags(with:excluding:)
  +addTags(savedItem:tags:) 
}
class "SyncTaskContainer" as SyncTaskContainer33 << (C, DarkSeaGreen) >> { 
  +{static} supportsSecureCoding : Bool 
}
class "AsyncOperation" as AsyncOperation34 << (C, DarkSeaGreen) >> { 
  +isAsynchronous : Bool
  +isFinished : Bool
  +isExecuting : Bool
  +finishOperation() 
}
class "SearchServiceError" as SearchServiceError35 << (E, LightSteelBlue) enum >> { 
  +noInternet 
}
class "SearchSavedItem" as SearchSavedItem36 << (S, SkyBlue) struct >> { 
  +remoteItem : SavedItem.RemoteSavedItem
  +item : SavedItem.RemoteSavedItem.Item
  +cursor : String? 
}
class "PocketSearchService" as PocketSearchService37 << (C, DarkSeaGreen) >> { 
  +results : Published<[SearchSavedItem]?>.Publisher
  +hasFinishedResults : Bool
  +lastEndCursor : String
  +search(for:scope:) 
}
class "V3DeviceToken" as V3DeviceToken38 << (S, SkyBlue) struct >> {  
}
class "RegisterPushTokenResponse" as RegisterPushTokenResponse39 << (S, SkyBlue) struct >> {  
}
class "DeregisterPushTokenResponse" as DeregisterPushTokenResponse40 << (S, SkyBlue) struct >> {  
}
class "PremiumStatusResponse" as PremiumStatusResponse41 << (S, SkyBlue) struct >> { 
  +subscriptionInfo : SubscriptionInfo 
}
class "Feature" as Feature42 << (S, SkyBlue) struct >> {  
}
class "SubscriptionInfo" as SubscriptionInfo43 << (S, SkyBlue) struct >> { 
  +source : String
  +sourceDisplay : String
  +subscriptionSource : String
  +subscriptionID : String
  +orderID : String
  +purchaseDate : String
  +renewDate : String
  +activeUntilDate : String
  +subscriptionTypeID : String
  +subscriptionType : String
  +isActive : Int
  +status : String
  +displayAmount : String
  +usdAmount : String 
}
class "RegisterPushTokenRequest" as RegisterPushTokenRequest44 << (S, SkyBlue) struct >> {  
}
class "DeregisterPushTokenRequest" as DeregisterPushTokenRequest45 << (S, SkyBlue) struct >> {  
}
class "PremiumStatusRequest" as PremiumStatusRequest46 << (S, SkyBlue) struct >> {  
}
class "PushType" as PushType47 << (E, LightSteelBlue) enum >> { 
  +alphadev
  +alpha
  +proddev
  +prod 
}
class "V3Client" as V3Client48 << (C, DarkSeaGreen) >> { 
  +{static} createDefault(sessionProvider:consumerKey:)
  +init(sessionProvider:consumerKey:urlSession:) 
}
class "ItemVideoness" as ItemVideoness49 << (E, LightSteelBlue) enum >> { 
  +noVideos
  +hasVideos
  +isVideo 
}
class "SyncEvent" as SyncEvent50 << (E, LightSteelBlue) enum >> { 
  +error(_:)
  +loadedArchivePage
  +savedItemCreated
  +savedItemsUpdated(_:) 
}
class "PocketSource" as PocketSource51 << (C, DarkSeaGreen) >> { 
  +events : AnyPublisher<SyncEvent, Never>
  +initialSavesDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +initialArchiveDownloadState : CurrentValueSubject<InitialDownloadState, Never>
  +init(space:user:sessionProvider:consumerKey:defaults:backgroundTaskManager:)
  +deinit
  +viewContext : NSManagedObjectContext
  +clear()
  +makeSavesController()
  +makeArchiveController()
  +makeSearchService()
  +makeUndownloadedImagesController()
  +backgroundObject(id:)
  +viewObject(id:)
  +viewRefresh(_:mergeChanges:)
  +backgroundRefresh(_:mergeChanges:)
  +retryImmediately()
  +deleteAccount() 
}
class "SaveServiceStatus" as SaveServiceStatus52 << (E, LightSteelBlue) enum >> { 
  +existingItem(_:)
  +newItem(_:)
  +taggedItem(_:) 
}
class "Imageness" as Imageness << (X, Orchid) extension >> { 
  ~init(imageness:)
  ~init(imageness:) 
}
class "DateFormatter" as DateFormatter << (X, Orchid) extension >> { 
  ~{static} clientAPI : DateFormatter
  ~{static} clientAPI : DateFormatter 
}
class "Author" as Author << (X, Orchid) extension >> { 
  ~init(remote:context:)
  ~init(remote:context:)
  ~init(remote:context:)
  ~init(remote:context:) 
}
class "DomainMetadata" as DomainMetadata << (X, Orchid) extension >> { 
  ~update(remote:)
  ~update(remote:) 
}
class "Image" as Image << (X, Orchid) extension >> { 
  ~init(remote:context:)
  ~init(remote:context:)
  ~init(remote:context:)
  ~init(remote:context:) 
}
class "Tag" as Tag << (X, Orchid) extension >> { 
  ~update(remote:)
  ~update(remote:) 
}
class "NWPath" as NWPath << (X, Orchid) extension >> {  
}
class "NWPathMonitor" as NWPathMonitor << (X, Orchid) extension >> { 
  +currentNetworkPath : NetworkPath
  +updateHandler : UpdateHandler?
  +currentNetworkPath : NetworkPath
  +updateHandler : UpdateHandler? 
}
class "CFNotificationName" as CFNotificationName << (X, Orchid) extension >> { 
  +{static} savedItemCreated
  +{static} savedItemUpdated
  +{static} unresolvedSavedItemCreated
  +{static} savedItemCreated
  +{static} savedItemUpdated
  +{static} unresolvedSavedItemCreated 
}
class "ApolloClient" as ApolloClient << (X, Orchid) extension >> { 
  ~{static} createDefault(sessionProvider:consumerKey:)
  ~{static} createDefault(sessionProvider:consumerKey:) 
}
class "NSValueTransformerName" as NSValueTransformerName << (X, Orchid) extension >> { 
  ~{static} syncTaskTransformer
  ~{static} syncTaskTransformer 
}
class "ProcessInfo" as ProcessInfo << (X, Orchid) extension >> {  
}
class "ApolloClientProtocol" as ApolloClientProtocol << (X, Orchid) extension >> { 
  +fetch(query:queue:resultHandler:)
  +fetch(query:queue:filename:line:column:funcName:)
  +perform(mutation:filename:line:column:funcName:)
  +fetch(query:queue:resultHandler:)
  +fetch(query:queue:filename:line:column:funcName:)
  +perform(mutation:filename:line:column:funcName:) 
}
class "URLSession" as URLSession << (X, Orchid) extension >> {  
}
class "Videoness" as Videoness << (X, Orchid) extension >> { 
  ~init(videoness:)
  ~init(videoness:) 
}
class "Date" as Date << (X, Orchid) extension >> { 
  ~toString() 
}
AnyObject <|.. SavedItemsControllerDelegate #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. SavedItemsController #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. ImagesControllerDelegate #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. ImagesController #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. NetworkPathMonitor #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. SearchService #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. SavedItemsControllerDelegate #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. SavedItemsController #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. ImagesControllerDelegate #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. ImagesController #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. NetworkPathMonitor #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
AnyObject <|.. SearchService #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- OEmbed #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
String -- ItemImageness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable -- ItemImageness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Hashable -- ItemImageness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSPersistentContainer <|-- PersistentContainer #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- SavedItem #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- SlateLineup #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- Item #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- Slate #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- Recommendation #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
SaveService <|.. PocketSaveService
NSObject <|-- SyncTaskContainer #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Operation <|-- AsyncOperation #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Error -- SearchServiceError #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
SearchService <|.. PocketSearchService
Decodable <|-- V3DeviceToken #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- RegisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
BasicV3Response <|-- RegisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- DeregisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
BasicV3Response <|-- DeregisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- PremiumStatusResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
BasicV3Response <|-- PremiumStatusResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable <|-- RegisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3Request <|-- RegisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable <|-- DeregisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3Request <|-- DeregisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable <|-- PremiumStatusRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3Request <|-- PremiumStatusRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
String -- PushType #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSObject <|-- V3Client #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3ClientProtocol <|.. V3Client
String -- ItemVideoness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable -- ItemVideoness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Hashable -- ItemVideoness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Source <|.. PocketSource
Decodable <|-- OEmbed #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
String -- ItemImageness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable -- ItemImageness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Hashable -- ItemImageness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSPersistentContainer <|-- PersistentContainer #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- SavedItem #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- SlateLineup #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- Item #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- Slate #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSManagedObject <|-- Recommendation #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
SaveService <|.. PocketSaveService
NSObject <|-- SyncTaskContainer #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Operation <|-- AsyncOperation #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Error -- SearchServiceError #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
SearchService <|.. PocketSearchService
Decodable <|-- V3DeviceToken #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- RegisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
BasicV3Response <|-- RegisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- DeregisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
BasicV3Response <|-- DeregisterPushTokenResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Decodable <|-- PremiumStatusResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
BasicV3Response <|-- PremiumStatusResponse #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable <|-- RegisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3Request <|-- RegisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable <|-- DeregisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3Request <|-- DeregisterPushTokenRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable <|-- PremiumStatusRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3Request <|-- PremiumStatusRequest #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
String -- PushType #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
NSObject <|-- V3Client #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
V3ClientProtocol <|.. V3Client
String -- ItemVideoness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Equatable -- ItemVideoness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Hashable -- ItemVideoness #line:DarkViolet;line.dotted;text:DarkViolet : inherits from
Source <|.. PocketSource
NetworkPath <|.. NWPath
NetworkPathMonitor <|.. NWPathMonitor
ExpiringActivityPerformer <|.. ProcessInfo
URLSessionProtocol <|.. URLSession

@enduml
