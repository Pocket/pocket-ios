---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
trigger_map:
  - pull_request_target_branch: '*'
    pipeline: qa-build-test-pipeline

pipelines:
  # Will create a QA Build and run a test across multiple simulator devices
  qa-build-test-pipeline:
    stages:
      # Build a qa build, and build a test build in parallel
      - build-and-test: {}
      # Run multiple tests on simulators in parallel
      - run-test-groups: {}
      - deploy-test-results: {}
  # Will create an app store capabale build, but release it to Internal Testing users in Testflight.
  # Intended to run nightly.
  nightly-internal-pipeline:
    stages:
      # First Build the release build (app store build)
      - release-build: {}
      # Run the steps to deploy to testflight internally
      - deploy-internal-testflight: {}
stages:
  build-and-test:
    workflows:
      # Build a test build
      - test-build: {}
      # Build a qa build
      - qa-build: {}
      # Build a release build
      - release-build: {}

  run-test-groups:
    workflows:
      - run-tests-unit: {}
      - run-tests-ui-1: {}
      - run-tests-ui-2: {}
      - run-tests-ui-3: {}

  deploy-test-results:
    workflows:
      - deploy-test-results: {}

  release-build:
    workflows:
      - release-build: {}
      - alpha-neue-release-build: {}
  deploy-internal-testflight:
    workflows:
      - internal-testflight-release: {}
      - alpha-neue-internal-testflight-release: {}

workflows:
  #Reusable workflow that is ran before each workflow to setup the necessary information
  _setup:
    steps:
      - brew-install@0:
          inputs:
            - packages: swiftlint
      - activate-ssh-key@4: {}
      - git-clone@7: {}
      - certificate-and-profile-installer@1: {}
      - file-downloader@1:
          inputs:
            - source: '$BITRISEIO_SECRETS_XCCONFIG_URL'
            - destination: '$BITRISE_SOURCE_DIR/Config/secrets.xcconfig'
          title: Install production secrets.xcconfig
      - cache-pull@2: {}
      - resource-archive@2:
          inputs:
            - extract_to_path: '$BITRISE_SOURCE_DIR/PocketKit/Sources/Textile/Style/Typography/Fonts'
            - archive_url: '$BITRISEIO_BASE_FONTS_URL'
          title: Install fonts
      - script@1:
          title: Download latest schema
          inputs:
            - content: |
                #!/usr/bin/env bash

                # fail if any commands fails
                set -e

                cd PocketKit
                swift package --allow-writing-to-package-directory apollo-cli-install
                ./apollo-ios-cli fetch-schema
                ./apollo-ios-cli generate

  #Workflow to that can be ran after archiving builds to upload dysms to sentry.
  _upload_sentry:
    steps:
      - script@1:
          inputs:
            - content: |
                #!/usr/bin/env bash

                # fail if any commands fails
                set -e

                brew tap getsentry/tools
                brew install getsentry/tools/sentry-cli
                sentry-cli --log-level=debug --auth-token $SENTRY_AUTH_TOKEN  upload-dif -o pocket -p ios-next $BITRISE_DSYM_PATH
                #TODO: In the future we can add Sentry releases here.

  _danger:
    steps:
      - cache-pull@2: {}
      - activate-ssh-key@4: {}
      - git-clone@7: {}
      - script@1:
          inputs:
            - content: |
                #!/usr/bin/env bash

                # fail if any commands fails
                set -e

                echo "Run danger"
                swift run danger-swift ci
      - cache-push@2: {}

  # Helper step to pull the built test bundle.
  _pull_test_bundle:
    steps:
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: build-and-test.test-build

  # Helper step to start snowplow
  _start_snowplow:
    steps:
        - script@1:
           inputs:
             - content: |
                #!/usr/bin/env bash

                # fail if any commands fails
                set -e
                
                ## Usually Pocket runs snowplow via our docker image, but Bitrise does not support docker in Mac environments so we use their built jar.
                ## It uses the values in MICRO_IGLU_REGISTRY_URL and MICRO_IGLU_API_KEY
                echo "Run snowplow"
                brew install wget openjdk
                wget https://github.com/snowplow-incubator/snowplow-micro/releases/download/micro-1.5.0/snowplow-micro-1.5.0.jar
                java -jar snowplow-micro-1.5.0.jar &

  #Builds a release build that could be uploaded to App Store Connect
  alpha-neue-release-build:
    steps:
      - file-downloader@1:
          inputs:
            - source: '$BITRISEIO_SECRETS_ALPHA_NEUE_XCCONFIG_URL'
            - destination: '$BITRISE_SOURCE_DIR/Config/secrets_alpha_neue.xcconfig'
          title: Install production secrets_alpha_neue.xcconfig
      - xcode-archive@4:
          title: Build an alpha neue app store release build
          inputs:
            - project_path: '$BITRISE_PROJECT_PATH'
            - scheme: '$BITRISE_SCHEME'
            - distribution_method: app-store
            - configuration: Release_AlphaNeue
            - xcconfig_content: CURRENT_PROJECT_VERSION = $BITRISE_BUILD_NUMBER
            - export_method: app-store
            - automatic_code_signing: api-key
            - api_key_path: "$BITRISEIO_APP_STORE_CONNECT_API_ID_URL"
            - api_key_id: "$APP_STORE_API_ID"
            - api_key_issuer_id: "$APP_STORE_API_ISSUER_ID"
      - deploy-to-bitrise-io@2:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_IPA_PATH:BITRISE_IPA_PATH'
      - cache-push@2: {}
    before_run:
      - _setup
    after_run:
      - _upload_sentry

  # Uses artifacts from the release build stage and workflow to ship the build to testflight.
  alpha-neue-internal-testflight-release:
    steps:
      - activate-ssh-key@4: {}
      #clone the repo so we can get our fastlane files.
      - git-clone@6: {}
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: alpha-neue-release-build.alpha-neue-release-build
      - fastlane@3:
          inputs:
            - automatic_code_signing: api-key
            - api_key_path: "$BITRISEIO_APP_STORE_CONNECT_API_ID_URL"
            - api_key_id: "$APP_STORE_API_ID"
            - api_key_issuer_id: "$APP_STORE_API_ISSUER_ID"
            - verbose_log: 'yes'
            - lane: beta_internal

  #Builds a release build that could be uploaded to App Store Connect
  release-build:
    steps:
      - xcode-archive@4:
          title: Build an app store release build
          inputs:
            - project_path: '$BITRISE_PROJECT_PATH'
            - scheme: '$BITRISE_SCHEME'
            - distribution_method: app-store
            - configuration: Release
            - xcconfig_content: CURRENT_PROJECT_VERSION = $BITRISE_BUILD_NUMBER
            - export_method: app-store
            - automatic_code_signing: api-key
            - api_key_path: "$BITRISEIO_APP_STORE_CONNECT_API_ID_URL"
            - api_key_id: "$APP_STORE_API_ID"
            - api_key_issuer_id: "$APP_STORE_API_ISSUER_ID"
      - deploy-to-bitrise-io@2:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_IPA_PATH:BITRISE_IPA_PATH'
      - cache-push@2: {}
    before_run:
      - _setup
    after_run:
      - _upload_sentry

  # Uses artifacts from the release build stage and workflow to ship the build to testflight.
  internal-testflight-release:
    steps:
      - activate-ssh-key@4: {}
      #clone the repo so we can get our fastlane files.
      - git-clone@6: {}
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: release-build.release-build
      - fastlane@3:
          inputs:
            - automatic_code_signing: api-key
            - api_key_path: "$BITRISEIO_APP_STORE_CONNECT_API_ID_URL"
            - api_key_id: "$APP_STORE_API_ID"
            - api_key_issuer_id: "$APP_STORE_API_ISSUER_ID"
            - verbose_log: 'yes'
            - lane: beta_internal

  qa-build:
    steps:
      - file-downloader@1:
          inputs:
            - source: '$BITRISEIO_SECRETS_DEVELOPMENT_XCCONFIG_URL'
            - destination: '$BITRISE_SOURCE_DIR/Config/secrets_alpha_neue.xcconfig'
          title: Install development secrets.xcconfig
      - xcode-archive@4:
          inputs:
            - xcconfig_content: |-
                COMPILER_INDEX_STORE_ENABLE = NO
                CURRENT_PROJECT_VERSION = $BITRISE_BUILD_NUMBER
            - configuration: Debug_AlphaNeue
            - automatic_code_signing: api-key
            - api_key_path: "$BITRISEIO_APP_STORE_CONNECT_API_ID_URL"
            - api_key_id: "$APP_STORE_API_ID"
            - api_key_issuer_id: "$APP_STORE_API_ISSUER_ID"
      - deploy-to-bitrise-io@2: {}
      - cache-push@2: {}
      - slack@3:
          inputs:
            - channel: '#log-ios-qa-builds'
            - webhook_url: $SLACK_WEBHOOK_URL
    before_run:
      - _setup
    after_run:
      - _upload_sentry

  test-build:
    steps:
      - file-downloader@1:
          inputs:
            - source: '$BITRISEIO_SECRETS_TEST_URL'
            - destination: '$BITRISE_SOURCE_DIR/Config/secrets.xcconfig'
          title: Install test secrets.xcconfig
      - xcode-build-for-test:
          inputs:
            - destination: generic/platform=iOS Simulator
      - deploy-to-bitrise-io@2.1.1:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_TEST_BUNDLE_PATH:BITRISE_TEST_BUNDLE_PATH'
      - cache-push@2: {}
    before_run:
      - _setup

  run-tests-unit:
    before_run:
      - _pull_test_bundle
    steps:
      - xcode-test-without-building:
          timeout: 600 #10 minutes
          title: Unit Tests
          inputs:
            - xctestrun: '${BITRISE_TEST_BUNDLE_PATH}/Pocket (iOS)_UnitTests_iphonesimulator16.2.xctestrun'
            - destination: platform=iOS Simulator,name=iPhone 14,OS=16.2
            - test_repetition_mode: retry_on_failure
      - deploy-to-bitrise-io@2.1.1:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_XCRESULT_PATH:BITRISE_UNIT_XCRESULT_PATH'

  run-tests-ui-1:
    meta:
      bitrise.io:
        machine_type_id: g2-m1-max.5core
    before_run:
      - _pull_test_bundle
      - _start_snowplow
    steps:
      - xcode-test-without-building:
          timeout: 1200 #20 minutes
          title: UI Test Suite 1
          inputs:
            - xctestrun: '${BITRISE_TEST_BUNDLE_PATH}/Pocket (iOS)_UITests_iphonesimulator16.2-arm64-x86_64.xctestrun'
            - destination: platform=iOS Simulator,name=iPhone 14,OS=16.2
            - test_repetition_mode: retry_on_failure
      - deploy-to-bitrise-io@2.1.1:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_XCRESULT_PATH:BITRISE_UITESTS_1_XCRESULT_PATH'

  run-tests-ui-2:
    meta:
      bitrise.io:
        machine_type_id: g2-m1-max.5core
    before_run:
      - _pull_test_bundle
      - _start_snowplow
    steps:
      - xcode-test-without-building:
          timeout: 1200 #20 minutes
          title: UI Test Suite 2
          inputs:
            - xctestrun: '${BITRISE_TEST_BUNDLE_PATH}/Pocket (iOS)_UITests-2_iphonesimulator16.2-arm64-x86_64.xctestrun'
            - destination: platform=iOS Simulator,name=iPhone 14,OS=16.2
            - test_repetition_mode: retry_on_failure
      - deploy-to-bitrise-io@2.1.1:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_XCRESULT_PATH:BITRISE_UITESTS_2_XCRESULT_PATH'

  run-tests-ui-3:
    meta:
      bitrise.io:
        machine_type_id: g2-m1-max.5core
    before_run:
      - _pull_test_bundle
      - _start_snowplow
    steps:
      - xcode-test-without-building:
          timeout: 1200 #20 minutes
          title: UI Test Suite 3
          inputs:
            - xctestrun: '${BITRISE_TEST_BUNDLE_PATH}/Pocket (iOS)_UITests-3_iphonesimulator16.2-arm64-x86_64.xctestrun'
            - destination: platform=iOS Simulator,name=iPhone 14,OS=16.2
            - test_repetition_mode: retry_on_failure
      - deploy-to-bitrise-io@2.1.1:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_XCRESULT_PATH:BITRISE_UITESTS_3_XCRESULT_PATH'

  deploy-test-results:
    steps:
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: run-test-groups\..*
      - script@1:
          inputs:
            - content: |
                #!/usr/bin/env bash
                set -eo pipefail

                xcrun xcresulttool merge "${BITRISE_UITESTS_1_XCRESULT_PATH}" "${BITRISE_UITESTS_2_XCRESULT_PATH}" "${BITRISE_UITESTS_3_XCRESULT_PATH}" "${BITRISE_UNIT_XCRESULT_PATH}"  --output-path "merged.xcresult"

                envman add --key BITRISE_XCRESULT_PATH --value "$(pwd)/merged.xcresult"
      - custom-test-results-export@0:
          inputs:
            - search_pattern: '*'
            - base_path: $BITRISE_XCRESULT_PATH
            - test_name: Pocket Tests
      - deploy-to-bitrise-io@2.1.1:
          inputs:
            - pipeline_intermediate_files: '$BITRISE_XCRESULT_PATH:BITRISE_XCRESULT_PATH'
    after_run:
      - _danger

app:
  envs:
    - opts:
        is_expand: false
      BITRISE_PROJECT_PATH: Pocket.xcodeproj
    - opts:
        is_expand: false
      BITRISE_SCHEME: Pocket (iOS)
    - opts:
        is_expand: false
      BITRISE_EXPORT_METHOD: development
    - opts:
        is_expand: false
      SKIP_APOLLO_CODEGEN: '1'

meta:
  bitrise.io:
    machine_type_id: g2-m1.8core
    stack: osx-xcode-14.2.x-ventura
