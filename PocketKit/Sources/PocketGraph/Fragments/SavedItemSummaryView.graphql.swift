// @generated
// This file was automatically generated and should not be edited.

@_exported import ApolloAPI

public struct SavedItemSummaryView: PocketGraph.SelectionSet, Fragment {
  public static var fragmentDefinition: StaticString { """
    fragment SavedItemSummaryView on SavedItem {
      __typename
      url
      remoteID: id
      isArchived
      isFavorite
      _deletedAt
      _createdAt
      archivedAt
      tags {
        __typename
        name
      }
      item {
        __typename
        ...ItemSummaryView
      }
    }
    """ }

  public let __data: DataDict
  public init(data: DataDict) { __data = data }

  public static var __parentType: ParentType { PocketGraph.Objects.SavedItem }
  public static var __selections: [Selection] { [
    .field("url", String.self),
    .field("id", alias: "remoteID", ID.self),
    .field("isArchived", Bool.self),
    .field("isFavorite", Bool.self),
    .field("_deletedAt", Int?.self),
    .field("_createdAt", Int.self),
    .field("archivedAt", Int?.self),
    .field("tags", [Tag]?.self),
    .field("item", Item.self),
  ] }

  /// The url the user saved to their list
  public var url: String { __data["url"] }
  /// Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  public var remoteID: ID { __data["remoteID"] }
  /// Helper property to indicate if the SavedItem is archived
  public var isArchived: Bool { __data["isArchived"] }
  /// Helper property to indicate if the SavedItem is favorited
  public var isFavorite: Bool { __data["isFavorite"] }
  /// Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  public var _deletedAt: Int? { __data["_deletedAt"] }
  /// Unix timestamp of when the entity was created
  public var _createdAt: Int { __data["_createdAt"] }
  /// Timestamp that the SavedItem became archied, null if not archived
  public var archivedAt: Int? { __data["archivedAt"] }
  /// The Tags associated with this SavedItem
  public var tags: [Tag]? { __data["tags"] }
  /// Link to the underlying Pocket Item for the URL
  public var item: Item { __data["item"] }

  /// Tag
  ///
  /// Parent Type: `Tag`
  public struct Tag: PocketGraph.SelectionSet {
    public let __data: DataDict
    public init(data: DataDict) { __data = data }

    public static var __parentType: ParentType { PocketGraph.Objects.Tag }
    public static var __selections: [Selection] { [
      .field("name", String.self),
    ] }

    /// The actual tag string the user created for their list
    public var name: String { __data["name"] }
  }

  /// Item
  ///
  /// Parent Type: `ItemResult`
  public struct Item: PocketGraph.SelectionSet {
    public let __data: DataDict
    public init(data: DataDict) { __data = data }

    public static var __parentType: ParentType { PocketGraph.Unions.ItemResult }
    public static var __selections: [Selection] { [
      .inlineFragment(AsItem.self),
    ] }

    public var asItem: AsItem? { _asInlineFragment() }

    /// Item.AsItem
    ///
    /// Parent Type: `Item`
    public struct AsItem: PocketGraph.InlineFragment {
      public let __data: DataDict
      public init(data: DataDict) { __data = data }

      public static var __parentType: ParentType { PocketGraph.Objects.Item }
      public static var __selections: [Selection] { [
        .fragment(ItemSummaryView.self),
      ] }

      /// The Item entity is owned by the Parser service.
      /// We only extend it in this service to make this service's schema valid.
      /// The key for this entity is the 'itemId'
      public var remoteID: String { __data["remoteID"] }
      /// key field to identify the Item entity in the Parser service
      public var givenUrl: Url { __data["givenUrl"] }
      /// If the givenUrl redirects (once or many times), this is the final url. Otherwise, same as givenUrl
      public var resolvedUrl: Url? { __data["resolvedUrl"] }
      /// The title as determined by the parser.
      public var title: String? { __data["title"] }
      /// The detected language of the article
      public var language: String? { __data["language"] }
      /// The page's / publisher's preferred thumbnail image
      @available(*, deprecated, message: "use the topImage object")
      public var topImageUrl: Url? { __data["topImageUrl"] }
      /// How long it will take to read the article (TODO in what time unit? and by what calculation?)
      public var timeToRead: Int? { __data["timeToRead"] }
      /// The domain, such as 'getpocket.com' of the {.resolved_url}
      public var domain: String? { __data["domain"] }
      /// The date the article was published
      public var datePublished: DateString? { __data["datePublished"] }
      /// true if the item is an article
      public var isArticle: Bool? { __data["isArticle"] }
      /// 0=no images, 1=contains images, 2=is an image
      public var hasImage: GraphQLEnum<Imageness>? { __data["hasImage"] }
      /// 0=no videos, 1=contains video, 2=is a video
      public var hasVideo: GraphQLEnum<Videoness>? { __data["hasVideo"] }
      /// List of Authors involved with this article
      public var authors: [ItemSummaryView.Author?]? { __data["authors"] }
      /// A snippet of text from the article
      public var excerpt: String? { __data["excerpt"] }
      /// Additional information about the item domain, when present, use this for displaying the domain name
      public var domainMetadata: DomainMetadata? { __data["domainMetadata"] }
      /// Array of images within an article
      public var images: [ItemSummaryView.Image?]? { __data["images"] }
      /// If the item has a syndicated counterpart the syndication information
      public var syndicatedArticle: ItemSummaryView.SyndicatedArticle? { __data["syndicatedArticle"] }

      public struct Fragments: FragmentContainer {
        public let __data: DataDict
        public init(data: DataDict) { __data = data }

        public var itemSummaryView: ItemSummaryView { _toFragment() }
      }

      /// Item.AsItem.DomainMetadata
      ///
      /// Parent Type: `DomainMetadata`
      public struct DomainMetadata: PocketGraph.SelectionSet {
        public let __data: DataDict
        public init(data: DataDict) { __data = data }

        public static var __parentType: ParentType { PocketGraph.Objects.DomainMetadata }

        /// The name of the domain (e.g., The New York Times)
        public var name: String? { __data["name"] }
        /// Url for the logo image
        public var logo: Url? { __data["logo"] }

        public struct Fragments: FragmentContainer {
          public let __data: DataDict
          public init(data: DataDict) { __data = data }

          public var domainMetadataParts: DomainMetadataParts { _toFragment() }
        }
      }
    }
  }
}
