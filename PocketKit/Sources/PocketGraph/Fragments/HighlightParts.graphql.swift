// @generated
// This file was automatically generated and should not be edited.

@_exported import ApolloAPI

public struct HighlightParts: PocketGraph.SelectionSet, Fragment {
  public static var fragmentDefinition: StaticString {
    #"fragment HighlightParts on Highlight { __typename _createdAt _updatedAt patch quote version }"#
  }

  public let __data: DataDict
  public init(_dataDict: DataDict) { __data = _dataDict }

  public static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Highlight }
  public static var __selections: [ApolloAPI.Selection] { [
    .field("__typename", String.self),
    .field("_createdAt", PocketGraph.Timestamp.self),
    .field("_updatedAt", PocketGraph.Timestamp.self),
    .field("patch", String.self),
    .field("quote", String.self),
    .field("version", Int.self),
  ] }

  /// When the Highlight was created
  public var _createdAt: PocketGraph.Timestamp { __data["_createdAt"] }
  /// When the highlight was last updated
  public var _updatedAt: PocketGraph.Timestamp { __data["_updatedAt"] }
  /// Patch string generated by 'DiffMatchPatch' library, serialized
  /// into text via `patch_toText` method. Use `patch_fromText` to
  /// deserialize into an object that can be used by the DiffMatchPatch
  /// library. Format is similar to UniDiff but is character-based.
  /// The patched text depends on version. For example, the version 2
  /// patch surrounds the highlighted text portion with a pair of
  /// sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
  /// Reference: https://github.com/google/diff-match-patch
  public var patch: String { __data["patch"] }
  /// The full text of the highlighted passage. Used as a fallback for
  /// rendering highlight if the patch fails.
  public var quote: String { __data["quote"] }
  /// Version number for highlight data specification
  public var version: Int { __data["version"] }

  public init(
    _createdAt: PocketGraph.Timestamp,
    _updatedAt: PocketGraph.Timestamp,
    patch: String,
    quote: String,
    version: Int
  ) {
    self.init(_dataDict: DataDict(
      data: [
        "__typename": PocketGraph.Objects.Highlight.typename,
        "_createdAt": _createdAt,
        "_updatedAt": _updatedAt,
        "patch": patch,
        "quote": quote,
        "version": version,
      ],
      fulfilledFragments: [
        ObjectIdentifier(HighlightParts.self)
      ]
    ))
  }
}
