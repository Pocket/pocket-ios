"""
A directive used by the Apollo iOS client to annotate operations or fragments that should be used exclusively for generating local cache mutations instead of as standard operations.
"""
directive @apollo_client_ios_localCacheMutation on QUERY | MUTATION | SUBSCRIPTION | FRAGMENT_DEFINITION

type ArticleMarkdown {
  text: String!
  images: [MarkdownImagePosition!]
}

"""The status of the syndicated article"""
enum ArticleStatus {
  DRAFT
  EXPIRED
  ACTIVE
}

"""Information about an Author of an article or some content"""
type Author {
  """Unique id for that Author"""
  id: ID!

  """Display name"""
  name: String

  """A url to that Author's site"""
  url: String
}

"""Row in a bulleted (unordered list)"""
type BulletedListElement implements ListElement {
  """Row in a list."""
  content: Markdown!

  """Zero-indexed level, for handling nested lists."""
  level: Int!
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""
A requested image that is cached and has the requested image parameters
"""
type CachedImage {
  """Id of the image that matches the ID from the requested options"""
  id: ID!

  """URL of the cached image"""
  url: Url

  """Width of the cached image"""
  width: Int

  """Height of the cached image"""
  height: Int
}

"""Set of parameters that will be used to change an image"""
input CachedImageInput {
  """Id of the image in the returned result set"""
  id: ID!

  """
  Quality of the image in whole percentage, 100 = full, quality 50 = half quality
  """
  qualityPercentage: Int

  """Width of the image"""
  width: Int

  """Height of the image"""
  height: Int

  """File type of the requested image"""
  fileType: ImageFileType
}

type Collection {
  externalId: ID!
  slug: String!
  title: String!
  excerpt: Markdown
  status: CollectionStatus!
  curationCategory: CurationCategory
  intro: Markdown
  imageUrl: Url

  """
  note that language is *not* being used as locale - only to specify the
  language of the collection.
  """
  language: CollectionLanguage!
  partnership: CollectionPartnership
  publishedAt: DateString
  authors: [CollectionAuthor!]!
  stories: [CollectionStory!]!

  """
  We will never return child categories in this type, so there's no need to
  specify `IABParentCategory` here. The basic `IABCategory` is sufficient.
  """
  IABParentCategory: IABCategory
  IABChildCategory: IABCategory
}

type CollectionAuthor {
  externalId: ID!
  name: String!
  slug: String
  bio: Markdown
  imageUrl: Url
  active: Boolean!
}

"""valid language codes for collections"""
enum CollectionLanguage {
  """German"""
  DE

  """English"""
  EN
}

"""
If a collection was made in partnership with an external company, this
entity will hold all required info about that partnership.
"""
type CollectionPartnership {
  externalId: String!
  type: CollectionPartnershipType!
  name: String!
  url: Url!
  imageUrl: Url!
  blurb: Markdown!
}

"""
Type and enums related to Collections made in partnership with a company.
"""
enum CollectionPartnershipType {
  PARTNERED
  SPONSORED
}

input CollectionsFiltersInput {
  """
  if not provided, or if an unsupported language is requested, defaults to `en`
  """
  language: String
}

type CollectionsResult {
  pagination: Pagination!
  collections: [Collection!]!
}

enum CollectionStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

type CollectionStory {
  externalId: ID!
  url: Url!
  title: String!
  excerpt: Markdown!
  imageUrl: Url
  authors: [CollectionStoryAuthor!]!
  publisher: String
  sortOrder: Int
  item: Item

  """
  if True, the story is provided by a partner and should be displayed as such
  """
  fromPartner: Boolean!
}

type CollectionStoryAuthor {
  name: String!
  sortOrder: Int!
}

"""
Represents an item that is in the Corpus and its associated manually edited metadata.
"""
type CorpusItem {
  """The GUID that is stored on an approved corpus item"""
  id: ID!

  """The URL of the Approved Item."""
  url: Url!

  """The title of the Approved Item."""
  title: String!

  """The excerpt of the Approved Item."""
  excerpt: String!

  """
  What language this item is in. This is a two-letter code, for example, 'EN' for English.
  """
  language: CorpusLanguage!

  """The name of the online publication that published this story."""
  publisher: String!

  """The image URL for this item's accompanying picture."""
  imageUrl: Url!

  """The image for this item's accompanying picture."""
  image: Image!

  """The author names and sort orders associated with this CorpusItem."""
  authors: [CorpusItemAuthor!]!

  """The topic associated with the Approved Item."""
  topic: String
}

"""An author associated with a CorpusItem."""
type CorpusItemAuthor {
  name: String!
  sortOrder: Int!
}

"""Valid language codes for curated corpus items."""
enum CorpusLanguage {
  """German"""
  DE

  """English"""
  EN
}

type CorpusRecommendation {
  """
  Clients should include this id in the `corpus_recommendation` Snowplow entity for impression, content_open, and engagement events related to this recommendation. This id is different across users, across requests, and across corpus items. The recommendation-api service associates metadata with this id to join and aggregate recommendations in our data warehouse.
  """
  id: ID!

  """Content meta data."""
  corpusItem: CorpusItem!

  """
  Reason why this CorpusItem is recommended to the user, or null if no reason is available.
  """
  reason: RecommendationReason
}

"""
This is the same as Slate but in this type all recommendations are backed by CorpusItems. This means that the editorial team has editorial control over the items served by this endpoint.
"""
type CorpusSlate {
  """UUID"""
  id: ID!

  """Recommendations for the current request context."""
  recommendations(count: Int = 10): [CorpusRecommendation!]!

  """
  Indicates the main type of reason why recommendations are included in this slate, or null if none is available.
  """
  recommendationReasonType: RecommendationReasonType

  """
  The display headline for the slate. Surface context may be required to render determine what to display. This will depend on if we connect the copy to the Surface, SlateExperiment, or Slate.
  """
  headline: String!

  """
  A smaller, secondary headline that can be displayed to provide additional context on the slate.
  """
  subheadline: String

  """
  Link to a page where the user can explore more recommendations similar to this slate, or null if no link is provided.
  """
  moreLink: Link
}

"""A collection of slates."""
type CorpusSlateLineup {
  """UUID"""
  id: ID!

  """Slates."""
  slates(count: Int = 15): [CorpusSlate!]!
}

"""Input for creating a new User-highlighted passage on a SavedItem."""
input CreateHighlightInput {
  """
  The full text of the highlighted passage. Used as a fallback for
  rendering highlight if the patch fails.
  """
  quote: String!

  """
  Patch string generated by 'DiffMatchPatch' library, serialized
  into text via `patch_toText` method.
  Format is similar to UniDiff but is character-based.
  The patched text depends on version. For example, the version 2
  patch surrounds the highlighted text portion with a pair of
  sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
  Reference: https://github.com/google/diff-match-patch
  """
  patch: String!

  """Annotation data version"""
  version: Int!

  """The ID of the Item that should be annotated in the User's list"""
  itemId: ID!

  """Optional note generated by User"""
  note: String
}

"""This type represents the information we need on a curated item."""
type CuratedInfo {
  title: String
  excerpt: String
  imageSrc: Url

  """The image for this item's accompanying picture."""
  image: Image
}

type CurationCategory {
  externalId: ID!
  name: String!
  slug: String!
}

"""A date in the YYYY-MM-DD format."""
scalar Date

"""A String representing a date in the format of `yyyy-MM-dd HH:mm:ss`"""
scalar DateString

input DeleteSavedItemTagsInput {
  """The id of the SavedItem from which to delete a Tag association"""
  savedItemId: ID!

  """The ids of the Tag to disassociate from the SavedItem"""
  tagIds: [ID!]!
}

"""Metadata from a domain, originally populated from ClearBit"""
type DomainMetadata {
  """The name of the domain (e.g., The New York Times)"""
  name: String

  """Url for the logo image"""
  logo: Url

  """Url for the greyscale logo image"""
  logoGreyscale: Url
}

"""
Input field to boost the score of an elasticsearch document based on a specific field and value
"""
input FunctionalBoostField {
  """Field to evaluate for boosting"""
  field: String!

  """Field value to evaluate"""
  value: FunctionalBoostValue!

  """A float number to boost the score by"""
  factor: Float!

  """The mathematical operation to use for boosting"""
  operation: SearchFunctionalBoostOperation!
}

scalar FunctionalBoostValue

"""A User-highlighted passage on a SavedItem"""
type Highlight {
  """The ID for this Highlight annotation"""
  id: ID!

  """
  The full text of the highlighted passage. Used as a fallback for
  rendering highlight if the patch fails.
  """
  quote: String!

  """
  Patch string generated by 'DiffMatchPatch' library, serialized
  into text via `patch_toText` method. Use `patch_fromText` to
  deserialize into an object that can be used by the DiffMatchPatch
  library. Format is similar to UniDiff but is character-based.
  The patched text depends on version. For example, the version 2
  patch surrounds the highlighted text portion with a pair of
  sentinel tags: '<pkt_tag_annotation></pkt_tag_annotation>'
  Reference: https://github.com/google/diff-match-patch
  """
  patch: String!

  """Version number for highlight data specification"""
  version: Int!

  """When the Highlight was created"""
  _createdAt: Timestamp!

  """When the highlight was last updated"""
  _updatedAt: Timestamp!

  """Highlight Note associated with this Highlight"""
  note: HighlightNote
}

type HighlightNote {
  """User entered text"""
  text: String!

  """When the HighlightNote was created"""
  _createdAt: Timestamp!

  """When the HighlightNote was last updated"""
  _updatedAt: Timestamp!
}

"""
Interactive Advertising Bureau Category - these are used on clients to serve relevant ads
"""
type IABCategory {
  externalId: String!
  name: String!
  slug: String!
}

type IABParentCategory {
  externalId: String!
  name: String!
  slug: String!
  children: [IABCategory!]!
}

"""An image that is keyed on URL"""
type Image {
  """The url of the image"""
  url: Url!

  """The determined width of the image at the url"""
  width: Int

  """The determined height of the image at the url"""
  height: Int

  """
  Query to get a cached and modified set of images based on the image from the original url, images will be matched by the client assigned id value
  """
  cachedImages(imageOptions: [CachedImageInput!]!): [CachedImage]

  """A caption or description of the image"""
  caption: String

  """
  A credit for the image, typically who the image belongs to / created by
  """
  credit: String

  """
  The id for placing within an Article View. {articleView.article} will have placeholders of <div id='RIL_IMG_X' /> where X is this id. Apps can download those images as needed and populate them in their article view.
  """
  imageId: Int!

  """Absolute url to the image"""
  src: String! @deprecated(reason: "use url property moving forward")

  """If the image is also a link, the destination url"""
  targetUrl: String
}

"""The image file type"""
enum ImageFileType {
  WEBP
  JPEG
  PNG
}

enum Imageness {
  """No images (v3 value is 0)"""
  NO_IMAGES

  """Contains images (v3 value is 1)"""
  HAS_IMAGES

  """Is an image (v3 value is 2)"""
  IS_IMAGE
}

"""
The heart of Pocket
A url and meta data related to it.
"""
type Item {
  """key field to identify the Item entity in the Parser service"""
  givenUrl: Url!

  """
  If the item is a collection allow them to get the collection information
  """
  collection: Collection

  """
  The Item entity is owned by the Parser service.
  We only extend it in this service to make this service's schema valid.
  The key for this entity is the 'itemId'
  """
  itemId: String!

  """Helper property to identify if the given item is in the user's list"""
  savedItem: SavedItem

  """
  A normalized value of the givenUrl.
  It will look like a url but is not guaranteed to be a valid url, just a unique string that is used to eliminate common duplicates.
  Item's that share a normal_url should be considered the same item. For example https://getpocket.com and http://getpocket.com will be considered the same since they both normalize to http://getpocket.com
  This is technically the true identity of an item, since this is what the backend uses to tell if two items are the same.
  However, for the clients to use this, they would all have to ship an implementation of the normalization function that the backend has exactly.
  And even if it did that, some items, some of the earliest saves, use a legacy normalize function and the client would have no way to know when to use which normalizing function.
  """
  normalUrl: String!

  """If available, the url to an AMP version of this article"""
  ampUrl: Url

  """List of Authors involved with this article"""
  authors: [Author]

  """The domain, such as 'getpocket.com' of the {.resolved_url}"""
  domain: String

  """
  Additional information about the item domain, when present, use this for displaying the domain name
  """
  domainMetadata: DomainMetadata

  """The string encoding code of this item's web page"""
  encoding: String

  """A snippet of text from the article"""
  excerpt: String

  """0=no images, 1=contains images, 2=is an image"""
  hasImage: Imageness

  """0=no videos, 1=contains video, 2=is a video"""
  hasVideo: Videoness

  """Array of images within an article"""
  images: [Image]

  """true if the item is an article"""
  isArticle: Boolean

  """
  true if the item is an index / home page, rather than a specific single piece of content
  """
  isIndex: Boolean

  """The mime type of this item's web page"""
  mimeType: String

  """The item id of the resolved_url"""
  resolvedId: String

  """
  If the givenUrl redirects (once or many times), this is the final url. Otherwise, same as givenUrl
  """
  resolvedUrl: Url

  """The title as determined by the parser."""
  title: String

  """The page's / publisher's preferred thumbnail image"""
  topImageUrl: Url @deprecated(reason: "use the topImage object")

  """The page's / publisher's preferred thumbnail image"""
  topImage: Image

  """
  Array of videos within the item If the item is a video, this will likely just contain one video
  """
  videos: [Video]

  """Number of words in the article"""
  wordCount: Int

  """The date the parser resolved this item"""
  dateResolved: DateString

  """The date the article was published"""
  datePublished: DateString

  """The detected language of the article"""
  language: String

  """
  How long it will take to read the article (TODO in what time unit? and by what calculation?)
  """
  timeToRead: Int

  """
  Indicates that the item was stored via a different search_hash (using the old method), we'll need to look up a different id
  """
  hasOldDupes: Boolean @deprecated(reason: "Most new items use a new hash")

  """The primary database id of the domain this article is from"""
  domainId: String @deprecated(reason: "Use a domain as the identifier instead")

  """If a the domainId is a subdomain this is the primary domain id"""
  originDomainId: String @deprecated(reason: "Use a domain as the identifier instead")

  """The http response code of the given url"""
  responseCode: Int @deprecated(reason: "Clients should not use this")

  """The length in bytes of the content"""
  contentLength: Int @deprecated(reason: "Clients should not use this")

  """Indicates if the text of the url is a redirect to another url"""
  innerDomainRedirect: Boolean @deprecated(reason: "Clients should not use this")

  """Indicates if the url requires a login"""
  loginRequired: Boolean @deprecated(reason: "Clients should not use this")

  """Indicates if the parser used fallback methods"""
  usedFallback: Int @deprecated(reason: "Clients should not use this")

  """Date this item was first parsed in Pocket"""
  timeFirstParsed: DateString @deprecated(reason: "Clients should not use this")

  """The resolved url, but ran through the normalized function"""
  resolvedNormalUrl: Url @deprecated(reason: "Use the resolved url instead")

  """
  The pocket HTML string of the article.
  Note: Web and Android as of 3/4/2022 use the Article field, any improvements made
  within MArticle for parsing will not be reflected in the article field.
  When that happens, the clients will work to move to MArticle.
  """
  article: String

  """
  The Marticle format of the article, used by clients for native article view.
  """
  marticle: [MarticleComponent!]

  """If the item has a syndicated counterpart the syndication information"""
  syndicatedArticle: SyndicatedArticle

  """Keyword highlights from search"""
  highlights: ItemHighlights
}

"""Elasticsearch highlights"""
type ItemHighlights {
  full_text: [String]
  url: [String]
  tags: [String]
  title: [String]
}

"""Union type for items that may or may not be processed"""
union ItemResult = PendingItem | Item

"""Web link"""
type Link {
  """The URL to send the user to when clicking on the link."""
  url: Url!

  """The link text displayed to the user."""
  text: String!
}

interface ListElement {
  """Row in a list."""
  content: Markdown!

  """Zero-indexed level, for handling nested lists."""
  level: Int!
}

"""
A string formatted with CommonMark markdown,
plus the strikethrough extension from GFM.
This Scalar is for documentation purposes; otherwise
not treated differently from String in the API.
"""
scalar Markdown

type MarkdownImagePosition {
  index: Int!
  position: Int!

  """Fallback is to use the images field in the Item entity"""
  src: String
}

"""Content of a blockquote"""
type MarticleBlockquote {
  """Markdown text content."""
  content: Markdown!
}

"""Content in a bulleted (unordered) list."""
type MarticleBulletedList {
  rows: [BulletedListElement!]!
}

"""A pre formatted text in the HTML content."""
type MarticleCodeBlock {
  """Content of a pre tag"""
  text: String!

  """
  Assuming the codeblock was a programming language, this field is used to identify it.
  """
  language: Int
}

union MarticleComponent = MarticleText | Image | MarticleDivider | MarticleTable | MarticleHeading | MarticleCodeBlock | Video | MarticleBulletedList | MarticleNumberedList | MarticleBlockquote | UnMarseable

type MarticleDivider {
  """Always '---'; provided for convenience if building a markdown string"""
  content: Markdown!
}

"""A heading in an article, with markdown formatting."""
type MarticleHeading {
  """Heading text, in markdown."""
  content: Markdown!

  """Heading level. Restricted to values 1-6."""
  level: Int!
}

"""Content in a bulleted (unordered) list."""
type MarticleNumberedList {
  rows: [NumberedListElement!]!
}

"""Content in a table."""
type MarticleTable {
  """Raw HTML representation of the table."""
  html: String!
}

"""
A section of the article's text content, in markdown.
A subset of gfm is supported. See README.md for more information.
"""
type MarticleText {
  """Markdown text content. Typically, a paragraph."""
  content: Markdown!
}

"""Default Mutation Type"""
type Mutation {
  """
  Create new highlight annotation(s). Returns the data for the created Highlight object(s).
  """
  createSavedItemHighlights(input: [CreateHighlightInput!]!): [Highlight!]!

  """
  Create new highlight note. Returns the data for the created Highlight note.
  """
  createSavedItemHighlightNote(id: ID!, input: String!): HighlightNote

  """
  Update an existing highlight annotation, by its ID.
  If the given highlight ID does not exist, will return error data
  and the highlight will not be created.
  """
  updateSavedItemHighlight(id: ID!, input: CreateHighlightInput!): Highlight!

  """
  Update an existing highlight note, by its ID.
  If the given highlight ID does not exist, will return error data
  and the note will not be updated.
  """
  updateSavedItemHighlightNote(id: ID!, input: String!): HighlightNote

  """Delete a highlight by its ID."""
  deleteSavedItemHighlight(id: ID!): ID!

  """Delete a highlight note by the Highlight ID."""
  deleteSavedItemHighlightNote(id: ID!): ID!

  """
  Updates a SavedItem, undeletes and unarchives it, bringing it to the top of the user's list, if it exists
  and creates it if it doesn't.
  """
  upsertSavedItem(input: SavedItemUpsertInput!): SavedItem!

  """Archives a SavedItem"""
  updateSavedItemArchive(id: ID!): SavedItem!

  """Unarchives a SavedItem"""
  updateSavedItemUnArchive(id: ID!): SavedItem!

  """Undo the delete operation for a SavedItem"""
  updateSavedItemUnDelete(id: ID!): SavedItem!

  """Favorites a SavedItem"""
  updateSavedItemFavorite(id: ID!): SavedItem!

  """Unfavorites a SavedItem"""
  updateSavedItemUnFavorite(id: ID!): SavedItem!

  """
  Set the Tags that are associated with a SavedItem.
  Will replace any existing Tag associations on the SavedItem.
  To remove all Tags from a SavedItem, use `updateSavedItemRemoveTags`.
  """
  updateSavedItemTags(input: SavedItemTagUpdateInput!): SavedItem!

  """
  Removes all Tag associations from a SavedItem. Returns the
  SavedItem that had its Tag associations cleared.
  Note that if this operation results in a Tag having no associations
  to a SavedItem, the Tag object will be deleted.
  """
  updateSavedItemRemoveTags(savedItemId: ID): SavedItem!

  """
  Deletes a SavedItem from the users list. Returns ID of the
  deleted SavedItem
  """
  deleteSavedItem(id: ID!): ID!

  """Creates user tags that a user can use to classify SavedItems"""
  createTags(input: [TagCreateInput!]!): [Tag!]!

  """
  Updates a Tag (renames the tag), and returns the updated Tag.
  If a Tag with the updated name already exists in the database, will
  associate that Tag to all relevant SavedItems rather than creating
  a duplicate Tag object.
  """
  updateTag(input: TagUpdateInput!): Tag!

  """
  Deletes a Tag object. This is deletes the Tag and all SavedItem associations
  (removes the Tag from all SavedItems). Returns ID of the deleted Tag.
  """
  deleteTag(id: ID!): ID!

  """
  Delete one or more tags from one or more SavedItems.
  Note that if this operation results in a Tag having no associations
  to a SavedItem, the Tag object will be deleted.
  """
  deleteSavedItemTags(input: [DeleteSavedItemTagsInput!]!): [SavedItem!]!

  """
  Add tags to the savedItems
  Inputs a list of SavedItemTagsInput(ie. savedItemId and the list of tagName)
  Returns the list of `SavedItem` for which the tags were added
  """
  createSavedItemTags(input: [SavedItemTagsInput!]!): [SavedItem!]!

  """
  Replaces the old tags associated with the savedItem to the new tag list
  given in the entry
  To remove all Tags from a SavedItem, use `updateSavedItemRemoveTags`.
  Note: if there is a new tag name in the SavedItemTagsInput, then the tag record will be created
  Inputs a list of SavedItemTagsInput(ie. savedItemId and list of tag names)
  Returns the SavedItem for which the tags have been modified.
  """
  replaceSavedItemTags(input: [SavedItemTagsInput!]!): [SavedItem!]!

  """Refresh an {Item}'s article content."""
  refreshItemArticle(url: String!): Item!

  """Updates user preferences for content recommendations across Pocket."""
  updateUserRecommendationPreferences(input: UpdateUserRecommendationPreferencesInput!): UserRecommendationPreferences!

  """
  update the email of the user for the given pocket userId. Request is made by
  an authenticated user, and the userID is inferred from the request headers `userid`.
  """
  updateUserEmail(email: String!): User!

  """
  Deletes user information and their pocket data for the given pocket userId. Returns pocket userId.
  """
  deleteUser: ID!

  """
  update the email of the user for the given firefox account ID. Request
  is made by a backend service. The `userid` in the headers should match
  the FxA ID or else an authentication error will be thrown.
  """
  updateUserEmailByFxaId(id: ID!, email: String!): User!

  """
  Deletes user information and their pocket data for the given firefox account ID.
  Returns firefox account ID sent as the query parameter with the request.
  """
  deleteUserByFxaId(id: ID!): ID!
}

"""A positive integer number."""
scalar NonNegativeInt

type NumberedListElement implements ListElement {
  """Row in a list"""
  content: Markdown!

  """Zero-indexed level, for handling nested lists."""
  level: Int!

  """
  Numeric index. If a nested item, the index is zero-indexed from the first child.
  """
  index: Int!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Represents a type of page for /explore
Deprecated for SlateLineups
"""
enum PageType {
  editorial_collection
  topic_page
}

type Pagination {
  currentPage: Int!
  totalPages: Int!
  totalResults: Int!
  perPage: Int!
}

"""
Pagination request. To determine which edges to return, the connection
evaluates the `before` and `after` cursors (if given) to filter the
edges, then evaluates `first`/`last` to slice the edges (only include a
value for either `first` or `last`, not both). If all fields are null,
by default will return a page with the first 30 elements.
"""
input PaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  The specified cursor is not included in the result.
  """
  after: String

  """
  Returns the elements in the list that come before the specified cursor.
  The specified cursor is not included in the result.
  """
  before: String

  """
  Returns the first _n_ elements from the list. Must be a non-negative integer.
  If `first` contains a value, `last` should be null/omitted in the input.
  """
  first: Int

  """
  Returns the last _n_ elements from the list. Must be a non-negative integer.
  If `last` contains a value, `first` should be null/omitted in the input.
  """
  last: Int
}

type PendingItem {
  """
  URL of the item that the user gave for the SavedItem
  that is pending processing by parser
  """
  url: Url!
  status: PendingItemStatus
}

enum PendingItemStatus {
  RESOLVED
  UNRESOLVED
}

"""The publisher that the curation team set for the syndicated article"""
type Publisher {
  """Name of the publisher of the article"""
  name: String

  """Url of the publisher"""
  url: Url

  """Square logo to use for the publisher"""
  logo: String

  """Wide logo to use for the publisher"""
  logoWide: String

  """Black wide based logo to use for the publisher"""
  logoWideBlack: String

  """The name to show to the article in recommendations"""
  recommendationName: String

  """Whether or not to show the authors of the article"""
  showAuthors: Boolean!

  """Whether or not to attribute the publisher to the article"""
  attributeCanonicalToPublisher: Boolean!

  """Whether or not to show an article call to action"""
  showArticleCta: Boolean!

  """The article call to action to show if selected"""
  articleCta: PublisherArticleCta

  """Whether or not to show the article appeared on domain"""
  appearedOnDomain: Boolean!

  """Whether or not to show publisher recomendations"""
  showPublisherRecommendations: Boolean
}

"""
The call to action to show on a ${SyndicatedArticle} for a specific publisher
"""
type PublisherArticleCta {
  """The url to link to"""
  url: String

  """The text to show"""
  text: String

  """The lead in text to show"""
  leadIn: String
}

"""
Default root level query type. All authorization checks are done in these queries.
TODO: These belong in a seperate User Service that provides a User object (the user settings will probably exist there too)
"""
type Query {
  """Retrievs a paged set of published Collections."""
  getCollections(page: Int, perPage: Int, filters: CollectionsFiltersInput): CollectionsResult!

  """
  Retrieves a Collection by the given slug. The Collection must be published.
  """
  getCollectionBySlug(slug: String!): Collection @deprecated(reason: "Use collectionBySlug instead")

  """
  Retrieves a {Collection} by the given slug. The {Collection} must be published.
  """
  collectionBySlug(slug: String!): Collection
  scheduledSurface(id: ID!): ScheduledSurface!

  """This is a future improvement, not needed now."""
  surface(id: ID!): Surface!

  """
  Returns a list of unleash toggles that are enabled for a given context.
  
  For more details on this check out https://docs.google.com/document/d/1dYS81h-DbQEWNLtK-ajLTylw454S32llPXUyBmDd5mU/edit# and https://getpocket.atlassian.net/wiki/spaces/PE/pages/1191444582/Feature+Flags+-+Unleash
  
  ~ For each of the enabled unleash toggles (via https://featureflags.readitlater.com/api/client/features or an unleash sdk)
  ~ Check if the toggle is assigned/enabled for the provided {.context}
  ~ Add an {UnleashAssignment} representing it to this list
  ~ If no toggles are found, return an empty list
  """
  getUnleashAssignments(context: UnleashContext!): UnleashAssignmentList @deprecated(reason: "use unleashAssignments instead")

  """
  Returns a list of unleash toggles that are enabled for a given context.
  
  For more details on this check out https://docs.google.com/document/d/1dYS81h-DbQEWNLtK-ajLTylw454S32llPXUyBmDd5mU/edit# and https://getpocket.atlassian.net/wiki/spaces/PE/pages/1191444582/Feature+Flags+-+Unleash
  
  ~ For each of the enabled unleash toggles (via https://featureflags.readitlater.com/api/client/features or an unleash sdk)
  ~ Check if the toggle is assigned/enabled for the provided {.context}
  ~ Add an {UnleashAssignment} representing it to this list
  ~ If no toggles are found, return an empty list
  """
  unleashAssignments(context: UnleashContext!): UnleashAssignmentList

  """Look up {Item} info by a url."""
  getItemByUrl(url: String!): Item @deprecated(reason: "Use itemByUrl instead")

  """Look up {Item} info by ID."""
  getItemByItemId(id: ID!): Item @deprecated(reason: "Use itemById instead")

  """Look up {Item} info by a url."""
  itemByUrl(url: String!): Item

  """Look up {Item} info by ID."""
  itemByItemId(id: ID!): Item

  """
  Under active development: Get ranked corpus slates and recommendations to deliver a unified Home experience.
  """
  homeSlateLineup: CorpusSlateLineup!

  """
  Get stories during Setup Moment onboarding that are personalized with user preferences provided during onboarding.
  """
  setupMomentSlate: CorpusSlate @deprecated(reason: "Setup Moment has been integrated into Home.")

  """List all topics that the user can express a preference for."""
  recommendationPreferenceTopics: [Topic!]!

  """List all available topics that we have recommendations for."""
  listTopics: [Topic!]! @deprecated(reason: "Use `getSlateLineup` with a specific SlateLineup instead.")

  """Request a specific `Slate` by id"""
  getSlate(
    """The {Slate.id} of the slate to return"""
    slateId: String!

    """
    Maximum number of recommendations to return in {Slate.recommendations}, defaults to 10
    """
    recommendationCount: Int = 10
  ): Slate @deprecated(reason: "Please use queries specific to the surface ex. setMomentSlate. If a named query for your surface does not yet exit please reach out to the Data Products team and they will happily provide you with a named query.")

  """Request a specific `SlateLineup` by id"""
  getSlateLineup(
    """The {SlateLineup.id} of the SlateLineup to return"""
    slateLineupId: String!

    """
    Maximum number of slates to return in {SlateLineup.slates}, defaults to 8
    """
    slateCount: Int = 8

    """
    Maximum number of recommendations to return in {Slate.recommendations}, defaults to 10
    """
    recommendationCount: Int = 10
  ): SlateLineup @deprecated(reason: "Please use queries specific to the surface ex. setMomentSlate. If a named query for your surface does not yet exit please reach out to the Data Products team and they will happily provide you with a named query.")

  """Look up {SyndicatedArticle} by a slug."""
  getSyndicatedArticleBySlug(slug: String!): SyndicatedArticle @deprecated(reason: "use syndicatedArticleBySlug instead")

  """Look up the {SyndicatedArticle} by a slug"""
  syndicatedArticleBySlug(slug: String!): SyndicatedArticle

  """Get a user entity for an authenticated client"""
  user: User

  """Gets a user entity for a given access token"""
  userByToken(token: String!): User

  """
  Gets a user for a given ID, only admin/internal service credentials will be allowed to do this for IDs other then their own.
  """
  userById(id: ID!): User
}

input RecItUserProfile {
  userModels: [String!]!
}

"""Represents a Recommendation from Pocket"""
type Recommendation {
  """
  The Recommendation entity is owned by the Recommendation API service.
  We extend it in this service to add an extra field ('curationInfo') to the Recommendation entity.
  The key for this entity is the 'itemId' found within the Item entity which is owned by the Parser service.
  """
  item: Item!

  """
  The feed id from mysql that this item was curated from (if it was curated)
  """
  feedId: Int
  curatedInfo: CuratedInfo

  """
  A generated id from the Data and Learning team that represents the Recommendation
  """
  id: ID

  """
  A generated id from the Data and Learning team that represents the Recommendation - Deprecated
  """
  feedItemId: ID @deprecated(reason: "Use `id`")

  """
  The ID of the item this recommendation represents
  TODO: Use apollo federation to turn this into an Item type.
  """
  itemId: ID!

  """The source of the recommendation"""
  recSrc: String!

  """The publisher of the item"""
  publisher: String
}

type RecommendationReason {
  """
  A succinct name for the recommendation reason that can be displayed to the user.
  """
  name: String!

  """The type of reason for why the recommendation is made."""
  type: RecommendationReasonType!
}

"""
Reasons why recommendations are made. Focuses on client needs and is not exhaustive.
"""
enum RecommendationReasonType {
  """Recommendations are sourced from the Pocket Hits newsletter."""
  POCKET_HITS

  """
  Recommendations that match the user's topic preferences are ranked higher.
  """
  PREFERRED_TOPICS
}

"""Interface that all state based entities must implement"""
interface RemoteEntity {
  """
  For tags entity, id denotes the unique tag Id.
  For savedItems, id denotes the itemId.
  Along with the userId provided in the header, we will use id to fetch savedItems/tags for the user.
  """
  id: ID!

  """Unix timestamp of when the entity was created"""
  _createdAt: Int

  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int

  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int

  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}

"""
Represents a Pocket Item that a user has saved to their list.
(Said otherways, indicates a saved url to a users list and associated user specific information.)
"""
type SavedItem implements RemoteEntity {
  """
  Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  """
  id: ID!

  """Annotations associated to this SavedItem"""
  annotations: SavedItemAnnotations

  """The url the user saved to their list"""
  url: String!

  """Helper property to indicate if the SavedItem is favorited"""
  isFavorite: Boolean!

  """Timestamp that the SavedItem became favorited, null if not favorited"""
  favoritedAt: Int

  """Helper property to indicate if the SavedItem is archived"""
  isArchived: Boolean!

  """Timestamp that the SavedItem became archied, null if not archived"""
  archivedAt: Int

  """Link to the underlying Pocket Item for the URL"""
  item: ItemResult!

  """The Tags associated with this SavedItem"""
  tags: [Tag!]

  """
  The Suggested Tags associated with this SavedItem, if the user is not premium or there are none, this will be empty.
  """
  suggestedTags: [Tag!]

  """The status of this SavedItem"""
  status: SavedItemStatus

  """Unix timestamp of when the entity was created"""
  _createdAt: Int!

  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int

  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int

  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}

"""
Container for all annotations associated to a SavedItem.
Can be extended when more types of annotations are added.
"""
type SavedItemAnnotations {
  """User-highlighted passages on a SavedItem"""
  highlights: [Highlight]
}

"""The connection type for SavedItem."""
type SavedItemConnection {
  """A list of edges."""
  edges: [SavedItemEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of SavedItems in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type SavedItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The SavedItem at the end of the edge."""
  node: SavedItem
}

"""A SavedItem can be one of these content types"""
enum SavedItemsContentType {
  """Item is a parsed article that contains videos"""
  VIDEO @deprecated(reason: "Use `HAS_VIDEO`.")

  """Item is a parsed page can be opened in reader view"""
  ARTICLE @deprecated(reason: "Use `IS_READABLE`.")

  """Item is an image"""
  IS_IMAGE

  """Item is a video"""
  IS_VIDEO

  """Item is a parsed article that contains videos"""
  HAS_VIDEO

  """Item is a parsed page can be opened in reader view"""
  IS_READABLE

  """Item is an un-parsable page and will be opened externally"""
  IS_EXTERNAL
}

type SavedItemSearchResult {
  savedItem: SavedItem!

  """
  Highlighted snippets from fields in the search results
  searchHighlights is a premium user feature. Not available for free search.
  """
  searchHighlights: SaveItemSearchHighlights
}

"""The connection type for SavedItem."""
type SavedItemSearchResultConnection {
  """A list of edges."""
  edges: [SavedItemSearchResultEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type SavedItemSearchResultEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SavedItemSearchResult!
}

"""Input field for filtering a user's list"""
input SavedItemsFilter {
  """Optional, filter to get SavedItems updated since a unix timestamp"""
  updatedSince: Int

  """Optional, filter to get SavedItems that have been favorited"""
  isFavorite: Boolean

  """
  Optional, filter to get SavedItems that have been archived.
  This field is deprecated. Use status instead.
  TODO: Add deprecate tag once input field deprecation is enabled.
  Ref: https://github.com/apollographql/federation/issues/912
  """
  isArchived: Boolean

  """Optional, filter to get SavedItems associated to the specified Tag."""
  tagIds: [ID!]

  """
  Optional, filter to get SavedItems associated to the specified Tag name.
  To get untagged items, include the string '_untagged_'.
  """
  tagNames: [String!]

  """Optional, filter to get SavedItems with highlights"""
  isHighlighted: Boolean

  """Optional, filter to get SavedItems based on content type"""
  contentType: SavedItemsContentType

  """
  Optional, filter to get user items based on status. Deprecated: use statuses instead.
  """
  status: SavedItemStatusFilter

  """
  Optional, filters to get user items based on multiple statuses (OR operator)
  """
  statuses: [SavedItemStatusFilter]
}

"""
Input to sort fetched SavedItems. If unspecified, defaults to CREATED_AT, ASC.
"""
input SavedItemsSort {
  """The field by which to sort SavedItems"""
  sortBy: SavedItemsSortBy!

  """The order in which to sort SavedItems"""
  sortOrder: SavedItemsSortOrder!
}

"""
Enum to specify the sort by field (these are the current options, we could add more in the future)
"""
enum SavedItemsSortBy {
  CREATED_AT
  UPDATED_AT
  FAVORITED_AT
  ARCHIVED_AT
}

"""Enum to specify the sort order of SavedItems fetched"""
enum SavedItemsSortOrder {
  ASC
  DESC
}

enum SavedItemStatus {
  ARCHIVED
  DELETED
  HIDDEN
  UNREAD
}

"""Valid statuses a client may use to filter SavedItems"""
enum SavedItemStatusFilter {
  UNREAD
  ARCHIVED
  HIDDEN
}

type SavedItemTagAssociation {
  """The ID of the SavedItem associated with the Tag"""
  savedItemId: ID!

  """The ID of the Tag associated with the SavedItem"""
  tagId: ID!
}

"""Input field for setting all Tag associations on a SavedItem."""
input SavedItemTagsInput {
  """The SavedItem ID to associate Tags to"""
  savedItemId: ID!

  """The set of Tag names to associate to the SavedItem"""
  tags: [String!]!
}

"""Input field for setting all Tag associations on a SavedItem."""
input SavedItemTagUpdateInput {
  """The SavedItem ID to associate Tags to"""
  savedItemId: ID!

  """The set of Tag IDs to associate to the SavedItem"""
  tagIds: [ID!]!
}

"""Input field for upserting a SavedItem"""
input SavedItemUpsertInput {
  """
  The url to create/update the SavedItem with. (the url to save to the list)
  """
  url: String!

  """Optional, create/update the SavedItem as a favorited item"""
  isFavorite: Boolean

  """Optional, time that request was submitted by client epoch/unix time"""
  timestamp: Int
}

"""
Elasticsearch highlights.
Highlighted snippets from the following fields in the search results
so clients can show users where the query matches are.
Each field, if available, contains an array of html text snippets
that contain a match to the search term.
The matching text is wrapped in `<em>` tags, e.g. ["Hiss at <em>vacuum</em> cleaner if it fits i sits"]
"""
type SaveItemSearchHighlights {
  fullText: [String]
  url: [String]
  tags: [String]
  title: [String]
}

"""Represents a surface that has scheduled items by day"""
type ScheduledSurface {
  """Agreed on GUID that is from our shared data pocket confluence"""
  id: ID!

  """Internal name of the surface"""
  name: String!

  """
  Subquery to get the ScheduledSurfaceItems to display to a user for a given date
  """
  items(date: Date!): [ScheduledSurfaceItem!]!
}

"""
A scheduled entry for an CorpusItem to appear on a Scheduled Surface.
For example, a story that is scheduled to appear on December 31st, 2021 on the Scheduled Surface in Firefox for the US audience.
"""
type ScheduledSurfaceItem {
  """A backend GUID that represents this scheduled run"""
  id: ID!

  """Agreed on GUID that is from our shared data pocket confluence"""
  surfaceId: ID!

  """The date the item should run at"""
  scheduledDate: Date!

  """The curated item that should run"""
  corpusItem: CorpusItem!
}

"""Input filed for filtering items"""
input SearchFilter {
  """Optional fitler to get item with specific tags"""
  tags: [String]

  """Optional filter to get items in a specific state"""
  status: SearchStatus

  """Optional filter to get items that are favorited"""
  favorite: Boolean

  """Optional filter to items of a specific content type"""
  contentType: String

  """
  Optional filter to get items that matches the domain
  domain should be in the url format, e.g getpocket.com (or) list.getpocket.com
  """
  domain: String
}

input SearchFilterInput {
  """Optional, filter to get user items that have been favorited"""
  isFavorite: Boolean

  """Optional, filter to get SavedItems based on content type"""
  contentType: SearchItemsContentType

  """Optional, filter to get user items based on status."""
  status: SearchItemsStatusFilter

  """
  Optional filter to get items that matches the domain
  domain should be in the url format, e.g getpocket.com (or) list.getpocket.com
  """
  domain: String
}

"""
Used to detemermine whether to add or multiply a document's score by the
functional boost factor
"""
enum SearchFunctionalBoostOperation {
  ADD
  MULTIPLY
}

"""Input field to get elasticsearch highlights of keywords"""
input SearchHighlightField {
  """Field to highlight"""
  field: String!

  """The number of characters to return in addition to the keyword"""
  size: Int!
}

"""A SavedItem can be one of these content types"""
enum SearchItemsContentType {
  VIDEO
  ARTICLE
}

"""
Enum to specify the sort by field (these are the current options, we could add more in the future)
"""
enum SearchItemsSortBy {
  """Indicates when a SavedItem was created"""
  CREATED_AT

  """Estimated time to read a SavedItem"""
  TIME_TO_READ

  """
  Sort SavedItems based on a relevance score
  This is a feature of elasticsearch and current only available for premium search
  """
  RELEVANCE
}

"""Enum to specify the sort order of user items fetched"""
enum SearchItemsSortOrder {
  ASC
  DESC
}

"""Valid statuses a client may use to filter"""
enum SearchItemsStatusFilter {
  UNREAD
  ARCHIVED
}

"""Input field for search"""
input SearchParams {
  """The keyword to search for"""
  term: String!

  """Filters to be applied to the search"""
  filters: SearchFilter

  """Sorting for the search"""
  sort: SearchSort

  """Offset for pagination"""
  from: Int

  """Number of items to return"""
  size: Int

  """Fields to search for the keyword in"""
  fields: [String]!

  """Fields that should be highlighted if keywords are found within them"""
  highlightFields: [SearchHighlightField]

  """Operation to boost the score of a document based"""
  functionalBoosts: [FunctionalBoostField]
}

"""The return type for the search query"""
type SearchResult {
  """Number of items found"""
  totalResults: Int!

  """Items found"""
  results: [Item]
  page: Int @deprecated(reason: "Not required by implementing clients")
  perPage: Int @deprecated(reason: "Not required by implementing client")
}

"""Input field for sorting items"""
input SearchSort {
  """Field in elasticsearch to sort by"""
  field: String!

  """Direction of the sort (ASC/DESC)"""
  direction: SearchSortDirection!
}

"""Sort direction of the returned items."""
enum SearchSortDirection {
  ASC
  DESC
}

input SearchSortInput {
  """The field by which to sort user items"""
  sortBy: SearchItemsSortBy!

  """The order in which to sort user items"""
  sortOrder: SearchItemsSortOrder
}

"""
An index item can be in one of these states
QUEUED implies an item that has not been archived
"""
enum SearchStatus {
  QUEUED
  ARCHIVED
}

"""
A grouping of item recommendations that relate to each other under a specific name and description
"""
type Slate {
  id: String!

  """
  A guid that is unique to every API request that returned slates, such as `getSlateLineup` or `getSlate`. The API will provide a new request id every time apps hit the API.
  """
  requestId: ID!

  """
  A unique guid/slug, provided by the Data & Learning team that can identify a specific experiment. Production apps typically won't request a specific one, but can for QA or during a/b testing.
  """
  experimentId: ID!

  """The name to show to the user for this set of recommendations"""
  displayName: String

  """The description of the the slate"""
  description: String

  """An ordered list of the recommendations to show to the user"""
  recommendations: [Recommendation!]!
}

type SlateLineup {
  """
  A unique slug/id that describes a SlateLineup. The Data & Learning team will provide apps what id to use here for specific cases.
  """
  id: ID!

  """
  A guid that is unique to every API request that returned slates, such as `getRecommendationSlateLineup` or `getSlate`. The API will provide a new request id every time apps hit the API.
  """
  requestId: ID!

  """
  A unique guid/slug, provided by the Data & Learning team that can identify a specific experiment. Production apps typically won't request a specific one, but can for QA or during a/b testing.
  """
  experimentId: ID!

  """An ordered list of slates for the client to display"""
  slates: [Slate!]!
}

"""
Union type to reference a surface
This is a future improvement, not needed now.
"""
union Surface = ScheduledSurface

"""An article that Pocket has syndicated and we also host on our own site"""
type SyndicatedArticle {
  """Content for the syndicated article"""
  content: String

  """Slug that pocket uses for this article in the url"""
  slug: String

  """The item id of the article we cloned"""
  originalItemId: ID!

  """The item id of this Syndicated Article"""
  itemId: ID

  """
  DRAFT — Article is not meant to be available to the public
  EXPIRED — Article contract is up and should be redirected to original article
  ACTIVE — Article is clear to be shown in syndicated form
  """
  status: ArticleStatus!

  """Should ads be shown on this article or not"""
  showAds: Boolean!

  """The manually set publisher information for this article"""
  publisher: Publisher
  publisherUrl: String!

  """Array of author names in string format"""
  authorNames: [String]!

  """When does the contract for syndication expire"""
  expiresAt: String

  """Title of syndicated article"""
  title: String!

  """Excerpt """
  excerpt: String

  """AWSDateTime — Format: YYYY-MM-DDThh:mm:ss.sssZ"""
  publishedAt: String!

  """Primary image to use in surfacing this content"""
  mainImage: String

  """The language of the article"""
  localeLanguage: String

  """The locale country of the article"""
  localeCountry: String

  """
  The Main IAB category of the article defined at https://support.aerserv.com/hc/en-us/articles/207148516-List-of-IAB-Categories
  """
  iabTopCategory: String

  """
  The Sub IAB category of the article defined at https://support.aerserv.com/hc/en-us/articles/207148516-List-of-IAB-Categories
  """
  iabSubCategory: String

  """
  The pocket curation category of the Article, maps to the Pocket Curation Topic lists
  """
  curationCategory: String @deprecated(reason: "use topic instead")

  """
  The pocket topic of the Article, maps to the Pocket Curation Topic lists
  """
  topic: String
}

"""Represents a Tag that a User has created for their list"""
type Tag implements RemoteEntity {
  """The actual tag string the user created for their list"""
  name: String!

  """
  paginated listing of all SavedItems associated with this Tag for the user
  """
  savedItems(filter: SavedItemsFilter, sort: SavedItemsSort, pagination: PaginationInput): SavedItemConnection

  """
  Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
  """
  id: ID!

  """Unix timestamp of when the entity was created"""
  _createdAt: Int

  """
  Unix timestamp of when the entity was last updated, if any property on the entity is modified this timestamp is set to the modified time
  """
  _updatedAt: Int

  """
  Version of the entity, this will increment with each modification of the entity's field
  """
  _version: Int

  """
  Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
  """
  _deletedAt: Int
}

"""The connection type for Tag."""
type TagConnection {
  """A list of edges."""
  edges: [TagEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of Tags in the connection."""
  totalCount: Int!
}

"""Input field for creating a Tag"""
input TagCreateInput {
  """The user provided tag string"""
  name: String!

  """ID of the SavedItem to associate with this Tag"""
  savedItemId: ID!
}

"""An edge in a connection."""
type TagEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The Tag at the end of the edge."""
  node: Tag
}

"""Input field for updating a Tag"""
input TagUpdateInput {
  """Tag ID"""
  id: ID!

  """The updated tag string"""
  name: String!
}

"""Integer based represention of a unix timestamp"""
scalar Timestamp

"""
Represents a topic for /explore
Deprecated for SlateLineups
"""
type Topic {
  """The id of the topic"""
  id: ID!

  """The name of the topic to show to the user"""
  name: String!

  """The name of the topic to show to the user"""
  displayName: String! @deprecated(reason: "displayName is deprecated. Use name instead.")

  """The type of page this topic represents used in  generation"""
  pageType: PageType!

  """The slug that should be used in the url to represent the topic"""
  slug: String!

  """The query that was used internally for elasticsearch to find items"""
  query: String!

  """The label the curator uses internally to get items onto this topic"""
  curatorLabel: String!

  """Whether or not clients should show this topic ot users"""
  isDisplayed: Boolean!

  """
  Whether or not this topic should be visiblly promoted (prominent on the page)
  """
  isPromoted: Boolean!

  """If returned a note to show to the user about the topic"""
  displayNote: String

  """The title to use in the HTML markup for SEO and social media sharing"""
  socialTitle: String

  """
  The description to use in the HTML markup for SEO and social media sharing
  """
  socialDescription: String

  """The image to use in the HTML markup for SEO and social media sharing"""
  socialImage: String

  """The internal feed id that this topic will pull from if set"""
  customFeedId: ID
}

input TopicInput {
  """The id of the topic"""
  id: ID!
}

"""Details on the variant/status of this toggle for a given user/context"""
type UnleashAssignment {
  """
  The unleash toggle name, the same name as it appears in the admin interface and feature api
  """
  name: String!

  """Whether or not the provided context is assigned"""
  assigned: Boolean!

  """If the toggle has variants, the variant name it is assigned to"""
  variant: String

  """If the variant has a payload, its payload value"""
  payload: String
}

"""Contains a list of all toggles."""
type UnleashAssignmentList {
  assignments: [UnleashAssignment]!
}

"""
Information about the user and device. Based on https://unleash.github.io/docs/unleash_context

Used to calculate assignment values.
"""
input UnleashContext {
  """
  A unique name for one of our apps. Can be any string, but here are some known/expected values:
  
  - `android`
  - `ios`
  - `web-discover`
  - `web-app`
  """
  appName: String

  """
  The environment the device is running in:
  - `prod`
  - `beta`
  - `alpha`
  """
  environment: UnleashEnvironment

  """If logged in, the user's encoded user id (uid). The {Account.user_id}."""
  userId: String

  """
  A device specific identifier that will be consistent across sessions, typically the encoded {guid} or some session token.
  """
  sessionId: String

  """
  The device's IP address. If omitted, inferred from either request header `x-forwarded-for` or the origin IP of the request.
  """
  remoteAddress: String
  properties: UnleashProperties
}

enum UnleashEnvironment {
  """User facing, production builds"""
  prod

  """User facing, beta level builds"""
  beta

  """Internal team builds"""
  alpha
}

"""
Extended properties that Unleash can use to assign users through a toggle's strategies.
"""
input UnleashProperties {
  """If omitted, inferred from request header `accept-langauge`."""
  locale: String

  """Only required on activation strategies that are based on account age"""
  accountCreatedAt: String

  """
  Only required on activation strategies that are based whether a user model exists
  """
  recItUserProfile: RecItUserProfile
}

"""
Represents content that could not be parsed into a valid Marticle* component.
"""
type UnMarseable {
  """The html that could not be parsed into a Marticle* component."""
  html: String!
}

input UpdateUserRecommendationPreferencesInput {
  """Topics that the user expressed interest in."""
  preferredTopics: [TopicInput!]!
}

"""A String in the format of a url."""
scalar Url

type User {
  """User id, provided by the user service."""
  id: ID!

  """Get a general paginated listing of all SavedItems for the user"""
  savedItems(filter: SavedItemsFilter, sort: SavedItemsSort, pagination: PaginationInput): SavedItemConnection

  """Get a paginated listing of all a user's Tags"""
  tags(pagination: PaginationInput): TagConnection

  """Get a SavedItem by its id"""
  savedItemById(id: ID!): SavedItem

  """Preferences for recommendations that the user has explicitly set."""
  recommendationPreferences: UserRecommendationPreferences

  """The public avatar url for the user"""
  avatarUrl: String

  """The public username for the user"""
  username: String

  """The users first name and last name combined"""
  name: String

  """A users bio for their profile"""
  description: String

  """The user's premium status"""
  isPremium: Boolean

  """Premium search query. Name will be updated after client input"""
  search(params: SearchParams!): SearchResult! @deprecated(reason: "Use searchSavedItems")

  """Get a paginated list of user items that match a given term"""
  searchSavedItems(term: String!, filter: SearchFilterInput, sort: SearchSortInput, pagination: PaginationInput): SavedItemSearchResultConnection
}

type UserRecommendationPreferences {
  """Topics that the user expressed interest in."""
  preferredTopics: [Topic!]
}

"""
A Video, typically within an Article View of an {Item} or if the Item is a video itself.
"""
type Video {
  """If known, the height of the video in px"""
  height: Int

  """Absolute url to the video"""
  src: String!

  """The type of video"""
  type: VideoType!

  """The video's id within the service defined by type"""
  vid: String

  """
  The id of the video within Article View. {articleView.article} will have placeholders of <div id='RIL_VID_X' /> where X is this id. Apps can download those images as needed and populate them in their article view.
  """
  videoId: Int!

  """If known, the width of the video in px"""
  width: Int

  """If known, the length of the video in seconds"""
  length: Int
}

enum Videoness {
  """No videos (v3 value is 0)"""
  NO_VIDEOS

  """Contains videos (v3 value is 1)"""
  HAS_VIDEOS

  """Is a video (v3 value is 2)"""
  IS_VIDEO
}

enum VideoType {
  """Youtube (v3 value is 1)"""
  YOUTUBE

  """Vimeo Link (v3 value is 2)"""
  VIMEO_LINK

  """Vimeo Moogaloop (v3 value is 3)"""
  VIMEO_MOOGALOOP

  """video iframe (v3 value is 4)"""
  VIMEO_IFRAME

  """html5 (v3 value is 5)"""
  HTML5

  """Flash (v3 value is 6)"""
  FLASH

  """iframe (v3 value is 7)"""
  IFRAME

  """Brightcove (v3 value is 8)"""
  BRIGHTCOVE
}